<!doctype lake><title>面试鸭 总结版</title><meta name="doc-version" content="1" /><meta name="viewport" content="fixed" /><meta name="typography" content="classic" /><meta name="paragraphSpacing" content="relax" /><h1 data-lake-id="YrLdR" id="YrLdR"><span data-lake-id="ud79cbf4a" id="ud79cbf4a">Java并发（周一）</span></h1><details data-lake-id="ubdb66f5a" id="ubdb66f5a" open="false" class="lake-collapse"><summary data-lake-id="uebabb7f7" id="uebabb7f7" class="lake-summary"><strong><span data-lake-id="u43495e93" id="u43495e93">Java中</span></strong><strong><span data-lake-id="ufb7fc2e3" id="ufb7fc2e3" style="color: #117CEE">线程安全</span></strong><strong><span data-lake-id="u427df218" id="u427df218">是什么意思</span></strong></summary><p data-lake-id="u0460f411" id="u0460f411"><span data-lake-id="u331f3a5c" id="u331f3a5c">多个线程</span><strong><span data-lake-id="ucf80b6a2" id="ucf80b6a2" style="color: #117CEE">并发访问或修改</span></strong><span data-lake-id="u5e69db6a" id="u5e69db6a">共享资源时，保证程序执行结果是</span><strong><span data-lake-id="u06b81119" id="u06b81119" style="color: #117CEE">正确和可预测</span></strong><span data-lake-id="u67db73bf" id="u67db73bf">的。</span></p></details><details data-lake-id="uc2ea0aad" id="uc2ea0aad" open="false" class="lake-collapse"><summary data-lake-id="u0008639c" id="u0008639c" class="lake-summary"><strong><span data-lake-id="ubd0e729d" id="ubd0e729d" style="color: #117CEE">实现线程安全</span></strong><strong><span data-lake-id="uf64e23d4" id="uf64e23d4">的常见方法</span></strong></summary><p data-lake-id="u286e770f" id="u286e770f"><span data-lake-id="u1488426c" id="u1488426c" style="color: #DF2A3F">原子锁住的集合发射信号量</span></p><ol list="u79505f3e"><li fid="uabb86a71" data-lake-id="u93c9b0e0" id="u93c9b0e0"><strong><span data-lake-id="u76ba3bfc" id="u76ba3bfc" style="color: #117CEE">原子操作</span></strong><span data-lake-id="ud0ba9725" id="ud0ba9725">：AtomicInteger类</span></li><li fid="uabb86a71" data-lake-id="ueb14275c" id="ueb14275c"><strong><span data-lake-id="u4ad0911c" id="u4ad0911c" style="color: #117CEE">锁机制</span></strong><span data-lake-id="u0ddacfbd" id="u0ddacfbd">：synchronized关键字、Lock接口实现类</span></li><li fid="uabb86a71" data-lake-id="u65de8554" id="u65de8554"><strong><span data-lake-id="uf715998c" id="uf715998c" style="color: #117CEE">线程安全的集合类</span></strong><span data-lake-id="u5f6b21ca" id="u5f6b21ca">：ConcurrentHashMap、CopyOnWriteArrayList</span></li><li fid="uabb86a71" data-lake-id="u19eacec9" id="u19eacec9"><strong><span data-lake-id="u9e4cd628" id="u9e4cd628" style="color: #117CEE">信号量</span></strong><span data-lake-id="u491bafb1" id="u491bafb1">Semaphore</span></li></ol></details><details data-lake-id="u8e4b493d" id="u8e4b493d" open="false" class="lake-collapse"><summary data-lake-id="u3d7df501" id="u3d7df501" class="lake-summary"><strong><span data-lake-id="u83f1d286" id="u83f1d286" style="color: #117CEE">协程（绿色线程）</span></strong></summary><p data-lake-id="ub1573cab" id="ub1573cab"><strong><span data-lake-id="u2b0d4bcb" id="u2b0d4bcb">特征</span></strong><span data-lake-id="u984abfd3" id="u984abfd3">：</span></p><ol list="u197804dd"><li fid="uf89d5853" data-lake-id="ucbe56e97" id="ucbe56e97"><span data-lake-id="uac76ddc4" id="uac76ddc4">协程</span><strong><span data-lake-id="u46524573" id="u46524573" style="color: #117CEE">开销小、更轻量</span></strong><span data-lake-id="uae0cac27" id="uae0cac27">（因为无需操作系统内核干预）</span></li><li fid="uf89d5853" data-lake-id="udc66495a" id="udc66495a"><span data-lake-id="uc096244e" id="uc096244e">协程切换是</span><strong><span data-lake-id="u58613db4" id="u58613db4" style="color: #117CEE">程序显式控制的</span></strong><span data-lake-id="u5a4ed618" id="u5a4ed618">（不是由操作系统调度）</span></li><li fid="uf89d5853" data-lake-id="u7e97477c" id="u7e97477c"><span data-lake-id="uafd8ec84" id="uafd8ec84">协程间的切换是</span><strong><span data-lake-id="u52f11c27" id="u52f11c27" style="color: #117CEE">非抢占式的</span></strong><span data-lake-id="uedbaa572" id="uedbaa572">（只有显式调用挂起操作时才会切换）</span></li></ol><p data-lake-id="u9f8f3458" id="u9f8f3458"><strong><span data-lake-id="ub5d8e3ab" id="ub5d8e3ab">使用场景</span></strong><span data-lake-id="u48970fc0" id="u48970fc0">：</span></p><ol list="u89aa8240"><li fid="u8733ae37" data-lake-id="uf240ff08" id="uf240ff08"><strong><span data-lake-id="u52b13195" id="u52b13195" style="color: #2F8EF4">大量IO操作</span></strong><span data-lake-id="u21c08c41" id="u21c08c41">，如网络请求、文件读写。因为不用一直等，在等待期间可以释放CPU资源。</span></li><li fid="u8733ae37" data-lake-id="ua9a822fa" id="ua9a822fa"><strong><span data-lake-id="u970c3f49" id="u970c3f49" style="color: #2F8EF4">高并发场景</span></strong></li></ol><p data-lake-id="u637cd040" id="u637cd040"><strong><span data-lake-id="udf812e8b" id="udf812e8b">协程库和框架：</span></strong></p><ul list="u8c2096ea"><li fid="u01549982" data-lake-id="u1d05936c" id="u1d05936c"><span data-lake-id="u67b58ea2" id="u67b58ea2">Java有协程但是废除了，Java21引入了虚拟线程（JVM级别实现）</span></li><li fid="u01549982" data-lake-id="uc3f7a768" id="uc3f7a768"><span data-lake-id="ufcdebe9c" id="ufcdebe9c">Go语言的goroutine</span></li><li fid="u01549982" data-lake-id="uf68e9941" id="uf68e9941"><span data-lake-id="ue17bca9a" id="ue17bca9a">Python的asyncio</span></li><li fid="u01549982" data-lake-id="uddf1a9d8" id="uddf1a9d8"><span data-lake-id="ue7d94fee" id="ue7d94fee">Kotlin的协程</span></li><li fid="u01549982" data-lake-id="u571b22a2" id="u571b22a2"><span data-lake-id="uac47b8e3" id="uac47b8e3">js、c# 的async/await</span></li></ul></details><details data-lake-id="ua35b84d3" id="ua35b84d3" open="false" class="lake-collapse"><summary data-lake-id="ud26a8716" id="ud26a8716" class="lake-summary"><strong><span data-lake-id="u9b401f6a" id="u9b401f6a">Java</span></strong><strong><span data-lake-id="uf5f0127a" id="uf5f0127a" style="color: #117CEE">虚拟线程</span></strong></summary><p data-lake-id="u3f85580f" id="u3f85580f"><strong><span data-lake-id="u0cc13f42" id="u0cc13f42">目的</span></strong><span data-lake-id="u3bc57820" id="u3bc57820">：</span><strong><span data-lake-id="u6cfb47c1" id="u6cfb47c1" style="color: #117CEE">降低线程创建和管理开销</span></strong><span data-lake-id="u4f4b7b95" id="u4f4b7b95">，使开发者</span><strong><span data-lake-id="ub3e4027e" id="ub3e4027e" style="color: #117CEE">不必担心操作系统资源限制</span></strong></p><p data-lake-id="u62678b3f" id="u62678b3f"><strong><span data-lake-id="ufd853c8a" id="ufd853c8a">特性</span></strong><span data-lake-id="u63a5ebcd" id="u63a5ebcd">：</span><strong><span data-lake-id="u8fbc6e61" id="u8fbc6e61" style="color: #117CEE">轻量、易用、可扩展</span></strong></p></details><details data-lake-id="u9e6cd5b0" id="u9e6cd5b0" open="false" class="lake-collapse"><summary data-lake-id="u0babfa50" id="u0babfa50" class="lake-summary"><strong><span data-lake-id="udb15a615" id="udb15a615" style="color: #117CEE">线程</span></strong><strong><span data-lake-id="u3372224c" id="u3372224c">的</span></strong><strong><span data-lake-id="u07292504" id="u07292504" style="color: #117CEE">生命周期</span></strong></summary><p data-lake-id="ub1358e5c" id="ub1358e5c"><span data-lake-id="u4c19b5a1" id="u4c19b5a1" style="color: #DF2A3F">初始可运行，阻塞等终止</span></p><ol list="u7b665f17"><li fid="u5734a3f6" data-lake-id="u9701a41d" id="u9701a41d"><span data-lake-id="u44ec3ca0" id="u44ec3ca0">初始状态 New</span></li><li fid="u5734a3f6" data-lake-id="u6e2da6f7" id="u6e2da6f7"><span data-lake-id="u6be8f980" id="u6be8f980">可运行状态 Runnable</span></li><li fid="u5734a3f6" data-lake-id="u23dbeddb" id="u23dbeddb"><span data-lake-id="ubacabec3" id="ubacabec3">休眠状态</span></li></ol><ol list="u7b665f17" data-lake-indent="1"><li fid="u5734a3f6" data-lake-id="ud1af8852" id="ud1af8852"><span data-lake-id="u2e60f196" id="u2e60f196">阻塞状态 Blocked</span></li><li fid="u5734a3f6" data-lake-id="u45f7f7b1" id="u45f7f7b1"><span data-lake-id="ua6cf9a66" id="ua6cf9a66">等待状态 Waiting、含等待时间的等待状态 Timed Waiting</span></li></ol><ol list="u7b665f17" start="4"><li fid="u5734a3f6" data-lake-id="ued3e22c8" id="ued3e22c8"><span data-lake-id="u91d0fdaa" id="u91d0fdaa">终止状态 Terminated</span></li></ol></details><details data-lake-id="uc918dc10" id="uc918dc10" open="false" class="lake-collapse"><summary data-lake-id="u71f46cbb" id="u71f46cbb" class="lake-summary"><strong><span data-lake-id="ue06193b9" id="ue06193b9">Java</span></strong><strong><span data-lake-id="u29ce9008" id="u29ce9008" style="color: #117CEE">线程</span></strong><strong><span data-lake-id="uc934c00e" id="uc934c00e">如何</span></strong><strong><span data-lake-id="ubb2b3f6d" id="ubb2b3f6d" style="color: #117CEE">通信</span></strong></summary><p data-lake-id="uae3192d2" id="uae3192d2"><span data-lake-id="u22a97bd6" id="u22a97bd6">线程间通信 (</span><strong><span data-lake-id="u58724c71" id="u58724c71" style="color: #117CEE">I</span></strong><span data-lake-id="ub2a88818" id="ub2a88818">nter-</span><strong><span data-lake-id="ue50ff6c3" id="ue50ff6c3" style="color: #117CEE">T</span></strong><span data-lake-id="ucc4a9053" id="ucc4a9053">hread</span><strong><span data-lake-id="u42ae0f8c" id="u42ae0f8c" style="color: #117CEE"> C</span></strong><span data-lake-id="u73d8bf3f" id="u73d8bf3f">ommunication, ITC)</span></p><ol list="ub834efbe"><li fid="ud2217cdd" data-lake-id="udebc8b19" id="udebc8b19"><strong><span data-lake-id="u3ceb533b" id="u3ceb533b" style="color: #117CEE">共享变量、共享文件</span></strong></li><li fid="ud2217cdd" data-lake-id="uae8eac05" id="uae8eac05"><strong><span data-lake-id="u89010d9c" id="u89010d9c" style="color: #117CEE">同步机制</span></strong></li></ol><ol list="ub834efbe" data-lake-indent="1"><li fid="ud2217cdd" data-lake-id="ua33ffde7" id="ua33ffde7"><span data-lake-id="u0f78dfb3" id="u0f78dfb3">synchronized</span></li><li fid="ud2217cdd" data-lake-id="ue6e69206" id="ue6e69206"><span data-lake-id="ue1389e3c" id="ue1389e3c">ReentrantLock</span></li><li fid="ud2217cdd" data-lake-id="uaae00981" id="uaae00981"><span data-lake-id="ud19287ef" id="ud19287ef">BlockingQueue</span></li><li fid="ud2217cdd" data-lake-id="uc26b85db" id="uc26b85db"><span data-lake-id="u8231adfc" id="u8231adfc">CountDownLatch</span></li><li fid="ud2217cdd" data-lake-id="u71fd3224" id="u71fd3224"><span data-lake-id="u239ae53a" id="u239ae53a">CyclicBarrier</span></li><li fid="ud2217cdd" data-lake-id="u03a0983f" id="u03a0983f"><span data-lake-id="ua940ffc3" id="ua940ffc3">volatile</span></li><li fid="ud2217cdd" data-lake-id="u39010c1e" id="u39010c1e"><span data-lake-id="u0af79bc6" id="u0af79bc6">Semaphore</span></li></ol></details><details data-lake-id="uaf306f14" id="uaf306f14" open="false" class="lake-collapse"><summary data-lake-id="u4aa8ae67" id="u4aa8ae67" class="lake-summary"><strong><span data-lake-id="ufb03305e" id="ufb03305e">Java</span></strong><strong><span data-lake-id="ua46a9d0f" id="ua46a9d0f" style="color: #117CEE">线程池</span></strong><strong><span data-lake-id="u80029d4a" id="u80029d4a">原理</span></strong></summary><p data-lake-id="u3f36cc33" id="u3f36cc33"><span data-lake-id="u3035efa1" id="u3035efa1">一种池化技术，预先创建管理线程，</span><span data-lake-id="u57f91e91" id="u57f91e91" style="color: #117CEE">避免频繁创建销毁</span><span data-lake-id="u63c3c91a" id="u63c3c91a">。</span></p><p data-lake-id="u06f2b39d" id="u06f2b39d"><strong><span data-lake-id="u9f7b9594" id="u9f7b9594" style="color: #117CEE">关键配置：</span></strong></p><ul list="uec0e7ebe"><li fid="u20b00c0d" data-lake-id="ucb90483b" id="ucb90483b"><span data-lake-id="u3105065f" id="u3105065f">核心线程数 corePoolSize：线程池中始终保持的线程数量</span></li><li fid="u20b00c0d" data-lake-id="u50e2674a" id="u50e2674a"><span data-lake-id="uc3822458" id="uc3822458">最大线程数 maximumPoolSize</span></li><li fid="u20b00c0d" data-lake-id="ude44e98d" id="ude44e98d"><span data-lake-id="u8449a621" id="u8449a621">空闲存活时间 keepAliveTime</span></li><li fid="u20b00c0d" data-lake-id="u72f3d551" id="u72f3d551"><span data-lake-id="ud119c9e8" id="ud119c9e8">工作队列 workQueue：用于存放待执行的任务</span></li><li fid="u20b00c0d" data-lake-id="uf9e4ecdc" id="uf9e4ecdc"><span data-lake-id="uc657a8ce" id="uc657a8ce">线程工厂 threadFactory</span></li><li fid="u20b00c0d" data-lake-id="uc5cea2a2" id="uc5cea2a2"><span data-lake-id="uc6ac2351" id="uc6ac2351">拒绝策略 rejectedExcution Handler</span></li></ul><p data-lake-id="u2c0ee2ba" id="u2c0ee2ba"><strong><span data-lake-id="u72804cf9" id="u72804cf9" style="color: #117CEE">工作原理：</span></strong></p><ol list="u652ba017"><li fid="ud92f6424" data-lake-id="u8bad8ed5" id="u8bad8ed5"><span data-lake-id="ub3cd0f19" id="ub3cd0f19">默认不会预创建，任务提交才会创建（特例prestartAllCoreThreads）</span></li><li fid="ud92f6424" data-lake-id="u1a0db87a" id="u1a0db87a"><span data-lake-id="u6abfc141" id="u6abfc141">核心线程满了之后</span></li></ol><ol list="u652ba017" data-lake-indent="1"><li fid="ud92f6424" data-lake-id="u0ed35a1f" id="u0ed35a1f"><span data-lake-id="u8e7d3cb2" id="u8e7d3cb2">任务堆积到</span><span data-lake-id="u7789c23f" id="u7789c23f" style="color: #117CEE">工作队列</span><span data-lake-id="ue4321b3f" id="ue4321b3f">中</span></li><li fid="ud92f6424" data-lake-id="u47c7c8bd" id="u47c7c8bd"><span data-lake-id="u7e8bd761" id="u7e8bd761">工作队列满：新增线程直到达到</span><span data-lake-id="u486b75c6" id="u486b75c6" style="color: #117CEE">最大线程数</span></li><li fid="ud92f6424" data-lake-id="u7856af17" id="u7856af17"><span data-lake-id="u17844f81" id="u17844f81">最大线程数：执行</span><span data-lake-id="uf5f217b8" id="uf5f217b8" style="color: #117CEE">拒绝策略</span></li></ol><ol list="u652ba017" start="3"><li fid="ud92f6424" data-lake-id="u124d07c7" id="u124d07c7"><span data-lake-id="u36151d92" id="u36151d92">空闲时间&gt;空闲存活时间，且线程数&gt;核心线程数，销毁线程</span></li></ol></details><details data-lake-id="u552146ef" id="u552146ef" open="false" class="lake-collapse"><summary data-lake-id="uab2f1971" id="uab2f1971" class="lake-summary"><strong><span data-lake-id="u128c0e39" id="u128c0e39">如何</span></strong><strong><span data-lake-id="u2b139ee6" id="u2b139ee6" style="color: #117CEE">设置</span></strong><strong><span data-lake-id="u6bfc44e7" id="u6bfc44e7">Java线程池的</span></strong><strong><span data-lake-id="u88434301" id="u88434301" style="color: #117CEE">线程数</span></strong><strong><span data-lake-id="uaa4a92a2" id="uaa4a92a2">？</span></strong></summary><p data-lake-id="u27993413" id="u27993413"><strong><span data-lake-id="u810e020c" id="u810e020c">CPU密集型任务</span></strong></p><ul list="ue314a517"><li fid="u8b2b9901" data-lake-id="ub04ab397" id="ub04ab397"><span data-lake-id="u731f7a2e" id="u731f7a2e">可以充分利用CPU资源，不会因为I/O操作被阻塞</span></li><li fid="u8b2b9901" data-lake-id="u488f7f52" id="u488f7f52"><span data-lake-id="u9758434e" id="u9758434e">根据经验，CPU密集型任务线程数 = CPU核心数 </span><span data-lake-id="udc39b03e" id="udc39b03e" style="color: #117CEE">+ 1</span></li></ul><p data-lake-id="ude290ec8" id="ude290ec8"><strong><span data-lake-id="u98c6f442" id="u98c6f442">I/O密集型任务</span></strong></p><ul list="u7bb34da3"><li fid="u0dc96a97" data-lake-id="u1383dfff" id="u1383dfff"><span data-lake-id="u652a8064" id="u652a8064">很多I/O操作，例如文件读取、数据库读取。读取数据时无法利用CPU，因此如果任务比较多，就需要更多线程执行任务，来提高等待I/O时候的CPU利用率</span></li><li fid="u0dc96a97" data-lake-id="ue9236d3b" id="ue9236d3b"><span data-lake-id="uadcfb0c3" id="uadcfb0c3">根据经验，I/O密集型任务线程数 = CPU核心数 </span><span data-lake-id="u1332bd76" id="u1332bd76" style="color: #117CEE">* 2</span></li></ul></details><details data-lake-id="u50209b4d" id="u50209b4d" open="false" class="lake-collapse"><summary data-lake-id="ua63aff6a" id="ua63aff6a" class="lake-summary"><strong><span data-lake-id="u21a7d26f" id="u21a7d26f">Java线程池有哪些</span></strong><strong><span data-lake-id="u5f397e84" id="u5f397e84" style="color: #117CEE">拒绝策略</span></strong><strong><span data-lake-id="uad254dac" id="uad254dac">？</span></strong></summary><ol list="ua279f0a9"><li fid="uf26a139d" data-lake-id="u3c58a736" id="u3c58a736"><strong><span data-lake-id="u7e84fe88" id="u7e84fe88" style="color: #117CEE">AbortPolicy</span></strong><span data-lake-id="u0463323a" id="u0463323a">：直接抛出RejectedExecutionException错误。适用于必须通知调用者任务未能被执行的场景。</span></li><li fid="uf26a139d" data-lake-id="ub3d2c6af" id="ub3d2c6af"><strong><span data-lake-id="u112f121f" id="u112f121f" style="color: #117CEE">CallerRunsPolicy</span></strong><span data-lake-id="u018078e2" id="u018078e2">：由调用者线程执行。适用于希望通过</span><span data-lake-id="uc482d7bc" id="uc482d7bc" style="color: #117CEE">减缓任务提交速度</span><span data-lake-id="u11b11685" id="u11b11685">来稳定系统的场景。</span></li><li fid="uf26a139d" data-lake-id="u8c04d1b7" id="u8c04d1b7"><strong><span data-lake-id="ufefe6176" id="ufefe6176" style="color: #117CEE">DiscardOldestPolicy</span></strong><span data-lake-id="u3f484646" id="u3f484646">：删除最早的任务然后重新提交当前任务。</span></li><li fid="uf26a139d" data-lake-id="uc96ada24" id="uc96ada24"><strong><span data-lake-id="uab1012c7" id="uab1012c7" style="color: #117CEE">DiscardPolicy</span></strong><span data-lake-id="ua7c7160f" id="ua7c7160f">：直接丢弃当前提交的任务，不会执行任何操作，不会抛出异常。</span></li></ol></details><details data-lake-id="uf0e71e57" id="uf0e71e57" open="true" class="lake-collapse"><summary data-lake-id="u420aa2df" id="u420aa2df" class="lake-summary"><strong><span data-lake-id="u35ec580b" id="u35ec580b">Java并发库中提供了哪些</span></strong><strong><span data-lake-id="u50a32857" id="u50a32857" style="color: #117CEE">线程池实现</span></strong><strong><span data-lake-id="ude63b1a6" id="ude63b1a6">？区别是什么？</span></strong></summary><p data-lake-id="u514ce7f8" id="u514ce7f8"><span data-lake-id="u69779532" id="u69779532">线程池实现，即</span><span data-lake-id="ub4c3b683" id="ub4c3b683" style="color: #117CEE">Executors的5个静态工厂方法：</span><span data-lake-id="u65646c83" id="u65646c83" style="color: #DF2A3F">固分单缓定</span></p><ol list="u3438ce2c"><li fid="u3ff74d66" data-lake-id="u77094c41" id="u77094c41"><strong><span data-lake-id="u7f3dbc22" id="u7f3dbc22" style="color: #117CEE">newFixedThreadPool</span></strong><span data-lake-id="u0b450ec7" id="u0b450ec7">：我就固定出这么多线程，多余的任务就排队，就算队伍排爆了我也不管</span></li><li fid="u3ff74d66" data-lake-id="u45744fce" id="u45744fce"><strong><span data-lake-id="u7e63f350" id="u7e63f350" style="color: #117CEE">newWorkStealingPool</span></strong><span data-lake-id="u557782d2" id="u557782d2">：即</span><span data-lake-id="u7b95bf37" id="u7b95bf37" style="color: #117CEE">ForkJoinPool</span><span data-lake-id="ucde17c87" id="ucde17c87">，大任务拆解为小任务分而治之。每个线程维护双端队列，自己队列处理完毕后，去别的线程队列尾部拿任务来执行</span></li><li fid="u3ff74d66" data-lake-id="ud23ab52e" id="ud23ab52e"><strong><span data-lake-id="ua2e13e74" id="ua2e13e74" style="color: #117CEE">newSingleThreadExecutor</span></strong><span data-lake-id="ub5451624" id="ub5451624">：一个线程池就一个线程，无界队列，</span><span data-lake-id="u105dd55d" id="u105dd55d" style="color: #117CEE">保证任务按序执行</span></li><li fid="u3ff74d66" data-lake-id="u05d407e0" id="u05d407e0"><strong><span data-lake-id="u7abf74c4" id="u7abf74c4" style="color: #117CEE">newCachedThreadPool</span></strong><span data-lake-id="u3c6f3701" id="u3c6f3701">：核心线程数0，任务队列没有存储空间，来个任务必须找线程接着，不然阻塞。cached的意思是会缓存之前执行过的线程，缓存时间是60s，有任务进来就复用之前的线程。适合</span><span data-lake-id="u5279e0cd" id="u5279e0cd" style="color: #117CEE">短时间大量短任务</span><span data-lake-id="u9251bee3" id="u9251bee3">的场景。</span></li><li fid="u3ff74d66" data-lake-id="u1ee47f99" id="u1ee47f99"><strong><span data-lake-id="u6c93bc64" id="u6c93bc64" style="color: #117CEE">newScheduledThreadPool</span></strong><span data-lake-id="u30b9123e" id="u30b9123e">：适用于需要</span><span data-lake-id="u8089d50f" id="u8089d50f" style="color: #117CEE">定时或周期性</span><span data-lake-id="u72736977" id="u72736977">执行任务的场景。</span></li></ol></details><details data-lake-id="ub5f6fe2c" id="ub5f6fe2c" open="false" class="lake-collapse"><summary data-lake-id="u5cb7d9d5" id="u5cb7d9d5" class="lake-summary"><strong><span data-lake-id="u6b67cf95" id="u6b67cf95" style="color: #117CEE">DelayQueue</span></strong><strong><span data-lake-id="uf5f57889" id="uf5f57889">和</span></strong><strong><span data-lake-id="ud821c141" id="ud821c141" style="color: #117CEE">ScheduledThreadPool</span></strong><strong><span data-lake-id="u8dede450" id="u8dede450">有什么区别？</span></strong></summary><p data-lake-id="u994383f2" id="u994383f2"><strong><span data-lake-id="u70c65b93" id="u70c65b93" style="color: #117CEE">DelayQueue</span></strong></p><ul list="uae5a6fd7"><li fid="u19670091" data-lake-id="u345a562a" id="u345a562a"><span data-lake-id="u9b12ebea" id="u9b12ebea">阻塞队列，实现Delayed接口</span></li><li fid="u19670091" data-lake-id="u10253921" id="u10253921"><span data-lake-id="u14ed418d" id="u14ed418d">使用</span><span data-lake-id="u7b2761f7" id="u7b2761f7" style="color: #117CEE">PriorityQueue</span><span data-lake-id="ud035439e" id="ud035439e">保证优先级高的（延迟时间最短，最快需要执行）元素先出队</span></li><li fid="u19670091" data-lake-id="u3044d485" id="u3044d485"><span data-lake-id="ufb3b5636" id="ufb3b5636">ReetrantLock上锁实现添加元素的并发安全</span></li></ul><p data-lake-id="u05833463" id="u05833463"><strong><span data-lake-id="u05f3c53d" id="u05f3c53d" style="color: #117CEE">DelayedWorkQueue</span></strong></p><ul list="uc04bf99b"><li fid="u35be69a6" data-lake-id="u743c2d03" id="u743c2d03"><span data-lake-id="u96957778" id="u96957778">使用</span><span data-lake-id="u0512a7a6" id="u0512a7a6" style="color: #117CEE">RunnableScheduledFuture</span><span data-lake-id="ubb9674fa" id="ubb9674fa">实现优先级队列</span></li></ul><p data-lake-id="u3b7d431e" id="u3b7d431e"><strong><span data-lake-id="u2c178a65" id="u2c178a65" style="color: #117CEE">ScheduledThreadPool</span></strong></p><ul list="u806cebf5"><li fid="ufa235cd1" data-lake-id="u9bdbe340" id="u9bdbe340"><span data-lake-id="u6c5f973a" id="u6c5f973a">线程池</span></li></ul></details><details data-lake-id="ua6b05f5a" id="ua6b05f5a" open="false" class="lake-collapse"><summary data-lake-id="uf7c4ec09" id="uf7c4ec09" class="lake-summary"><strong><span data-lake-id="u9f9a4ca6" id="u9f9a4ca6">什么是</span></strong><strong><span data-lake-id="u311cf1e8" id="u311cf1e8" style="color: #117CEE">Java的Timer</span></strong><strong><span data-lake-id="u39e573f3" id="u39e573f3">？</span></strong></summary><p data-lake-id="u6e18179a" id="u6e18179a"><strong><span data-lake-id="u8717a7a7" id="u8717a7a7">适用：</span></strong><span data-lake-id="uc9b3d020" id="uc9b3d020">实现</span><span data-lake-id="u3d46cbb2" id="u3d46cbb2" style="color: #117CEE">延时或周期性</span><span data-lake-id="u6ca8ed21" id="u6ca8ed21">任务</span></p><p data-lake-id="u95a4a647" id="u95a4a647"><strong><span data-lake-id="ude9248ea" id="ude9248ea">核心：</span></strong><span data-lake-id="u76a859cf" id="u76a859cf" style="color: #117CEE">小顶堆</span><span data-lake-id="u7a305701" id="u7a305701">实现的</span><span data-lake-id="ud213cc21" id="ud213cc21" style="color: #117CEE">优先队列</span><span data-lake-id="ucc7404a3" id="ucc7404a3">（增删O(logn)） + 封装的执行任务的线程</span><span data-lake-id="ufa70911d" id="ufa70911d" style="color: #117CEE">TimeThread</span></p><p data-lake-id="ub73333a7" id="ub73333a7"><span data-lake-id="ue42018cb" id="ue42018cb">TimeThread不断拿 </span><strong><span data-lake-id="u46ba3465" id="u46ba3465">第一个任务的执行时间 </span></strong><span data-lake-id="ucb2336e4" id="ucb2336e4">和 </span><strong><span data-lake-id="u5b86a0b2" id="u5b86a0b2">当前时间</span></strong><span data-lake-id="uf8c8fc6c" id="uf8c8fc6c"> 比较：</span></p><ul list="u5d66fa7b"><li fid="u1e72fff7" data-lake-id="ua1ebd200" id="ua1ebd200"><span data-lake-id="u072f0191" id="u072f0191">时间未到：wait等待</span></li><li fid="u1e72fff7" data-lake-id="u49b8ab50" id="u49b8ab50"><span data-lake-id="uacc8a23c" id="uacc8a23c">时间到了</span></li></ul><ul list="u5d66fa7b" data-lake-indent="1"><li fid="u1e72fff7" data-lake-id="u9ea86998" id="u9ea86998"><span data-lake-id="uc6daaedc" id="uc6daaedc">延时任务：从优先队列移除</span></li><li fid="u1e72fff7" data-lake-id="u4fe7ede2" id="u4fe7ede2"><span data-lake-id="u9f35b3c7" id="u9f35b3c7">周期性任务：修改为下次执行的时间</span></li></ul><p data-lake-id="u9d1ce905" id="u9d1ce905"><strong><span data-lake-id="ufee122bd" id="ufee122bd">弊端：</span></strong></p><ol list="uff5a2e6a"><li fid="u5b8d9595" data-lake-id="ub5561144" id="ub5561144"><span data-lake-id="u04777826" id="u04777826">性能隐患。数据量大的时候频繁入堆出堆。</span></li><li fid="u5b8d9595" data-lake-id="u9b51930d" id="u9b51930d"><span data-lake-id="u1cbd9c55" id="u1cbd9c55">单线程且没有异常处理。一个任务执行过久或出错会影响下一个。</span></li></ol></details><details data-lake-id="uf75d5582" id="uf75d5582" open="true" class="lake-collapse"><summary data-lake-id="u616cf9d6" id="u616cf9d6" class="lake-summary"><strong><span data-lake-id="u91c6c879" id="u91c6c879">什么是</span></strong><strong><span data-lake-id="u316be195" id="u316be195" style="color: #117CEE">时间轮 (Time Wheel)</span></strong><strong><span data-lake-id="u2eef72b8" id="u2eef72b8">？</span></strong></summary><p data-lake-id="u33deb1e5" id="u33deb1e5"><span data-lake-id="u3315876a" id="u3315876a">环形数组实现</span></p><p data-lake-id="u69de4042" id="u69de4042"><strong><span data-lake-id="u8a5ab497" id="u8a5ab497">槽</span></strong><span data-lake-id="u8f724845" id="u8f724845">：数组的元素。槽位本身指代时间精度，一秒扫一个槽...</span></p><p data-lake-id="u15bc030f" id="u15bc030f"><span data-lake-id="uece9a67c" id="uece9a67c">槽内部用</span><span data-lake-id="ubbbbbf71" id="ubbbbbf71" style="color: #117CEE">双向链表</span><span data-lake-id="uc510ba37" id="uc510ba37">存放待执行任务，增删复杂度O(1)</span></p><ol list="u3709d88f"><li fid="u18e923ba" data-lake-id="ud26d31e9" id="ud26d31e9"><strong><span data-lake-id="u3a30c701" id="u3a30c701">增加轮次</span></strong></li><li fid="u18e923ba" data-lake-id="u502639dd" id="u502639dd"><strong><span data-lake-id="ud74c8339" id="ud74c8339">多层次时间轮（手表）（Kafka）</span></strong><span data-lake-id="uf8a72e8b" id="uf8a72e8b">：不断降级以保证时间精度一致性。</span></li></ol></details><h1 data-lake-id="IZtiN" id="IZtiN"><span data-lake-id="u51da45be" id="u51da45be">Java虚拟机（周二）</span></h1><details data-lake-id="u1ac490fd" id="u1ac490fd" open="false" class="lake-collapse"><summary data-lake-id="ufba28f6d" id="ufba28f6d" class="lake-summary"><strong><span data-lake-id="ua5e1eb21" id="ua5e1eb21">JVM的</span></strong><strong><span data-lake-id="u979f8f8b" id="u979f8f8b" style="color: #117CEE">TLAB</span></strong><strong><span data-lake-id="ucdb27154" id="ucdb27154">是什么？</span></strong></summary><p data-lake-id="uc7e66a01" id="uc7e66a01"><span data-lake-id="u85a2b4f1" id="u85a2b4f1" style="color: #117CEE">线程本地分配缓冲区</span><span data-lake-id="udf53462a" id="udf53462a">(Thread-Local Allocation Buffer, TLAB)</span></p><p data-lake-id="u497af3e6" id="u497af3e6"><strong><span data-lake-id="ua4dada35" id="ua4dada35">起源：</span></strong><span data-lake-id="ue95afb95" id="ue95afb95">新生代内存申请通过指针划分，多个线程分配对象时因为互斥导致效率低下。</span></p><p data-lake-id="uec5095ee" id="uec5095ee"><strong><span data-lake-id="u5ee65545" id="u5ee65545">目标：</span></strong><span data-lake-id="u84697ec3" id="u84697ec3">减少多线程竞争，优化对象分配效率</span></p><p data-lake-id="uaa20f4bb" id="uaa20f4bb"><strong><span data-lake-id="ub1d2c884" id="ub1d2c884">思想：</span></strong><span data-lake-id="u742bdbb8" id="u742bdbb8">在Java</span><span data-lake-id="u3281602a" id="u3281602a" style="color: #117CEE">堆内存</span><span data-lake-id="ud4ba8d93" id="ud4ba8d93">中为每个线程分配小的、私有的内存区域，用于对象的分配</span></p><p data-lake-id="u3dc0132f" id="u3dc0132f"><strong><span data-lake-id="u6aaf8780" id="u6aaf8780">缺点：</span></strong><span data-lake-id="u1eeceb35" id="u1eeceb35">会造成空间浪费，只能分批小对象，大的对象需要在共享的eden区分配</span></p></details><details data-lake-id="u6e092c24" id="u6e092c24" open="false" class="lake-collapse"><summary data-lake-id="udf7e80bb" id="udf7e80bb" class="lake-summary"><strong><span data-lake-id="u8549501d" id="u8549501d">JVM垃圾回收的</span></strong><strong><span data-lake-id="u3c78d011" id="u3c78d011" style="color: #117CEE">concurrent mode failure</span></strong><strong><span data-lake-id="u59547ffd" id="u59547ffd">是什么</span></strong></summary><p data-lake-id="u697174e7" id="u697174e7"><strong><span data-lake-id="ue19a3536" id="ue19a3536">起源：</span></strong><span data-lake-id="u15eb1aee" id="u15eb1aee">通常发生在启用了</span><span data-lake-id="u1a55c023" id="u1a55c023" style="color: #117CEE">并发标记-清除(Concurrent Mark-Sweep, CMS)</span><span data-lake-id="u3f7865e2" id="u3f7865e2">垃圾收集器时</span></p><p data-lake-id="u62b6c6e7" id="u62b6c6e7"><strong><span data-lake-id="u0b8ca2d9" id="u0b8ca2d9">原因：</span></strong><span data-lake-id="ue16a01e8" id="ue16a01e8">CMS的并发标记阶段由于某些原因（如应用线程高负载）延迟完成，导致</span><span data-lake-id="u43b26510" id="u43b26510" style="color: #117CEE">老年代回收不及时</span><span data-lake-id="ud78a7b18" id="ud78a7b18">、老年代空间不足以容纳新分配的对象，导致</span><span data-lake-id="u84a0a33e" id="u84a0a33e" style="color: #117CEE">新生代晋升老年代失败</span><span data-lake-id="u7e4a9876" id="u7e4a9876">，不得不触发一次</span><span data-lake-id="ue8109bd2" id="ue8109bd2" style="color: #117CEE">Stop-the-World的Full GC</span></p><p data-lake-id="u8299a7d3" id="u8299a7d3"><strong><span data-lake-id="u3499ebb5" id="u3499ebb5">解决：</span></strong></p><ol list="uac4eed43"><li fid="ufe98ba5e" data-lake-id="uaf2dacf4" id="uaf2dacf4"><span data-lake-id="uf750a1d5" id="uf750a1d5">增加老年代空间</span></li><li fid="ufe98ba5e" data-lake-id="u29bce67b" id="u29bce67b"><span data-lake-id="uad62dd86" id="uad62dd86" style="color: #117CEE">降低CMS的启动阈值，提前开始垃圾收集</span></li><li fid="ufe98ba5e" data-lake-id="u34a1c1d5" id="u34a1c1d5"><span data-lake-id="ud453fa32" id="ud453fa32">增加新生代的Survivor空间，减少过早晋升</span></li><li fid="ufe98ba5e" data-lake-id="u4ead4bb2" id="u4ead4bb2"><span data-lake-id="ufd4ddd68" id="ufd4ddd68">调整新生代老年代比例，减少晋升频率和数量</span></li><li fid="ufe98ba5e" data-lake-id="uec224a10" id="uec224a10"><span data-lake-id="uae330fd3" id="uae330fd3" style="color: #117CEE">减少短生命周期对象生成，减少对象分配频率，优化内存使用</span></li></ol></details><details data-lake-id="u18644c17" id="u18644c17" open="true" class="lake-collapse"><summary data-lake-id="u28f0de37" id="u28f0de37" class="lake-summary"><strong><span data-lake-id="ua324ce42" id="ua324ce42">Java如何实现跨平台？</span></strong></summary><p data-lake-id="u6d555660" id="u6d555660"><span data-lake-id="ufa8e1508" id="ufa8e1508">依靠</span><span data-lake-id="u02e21a3d" id="u02e21a3d" style="color: #117CEE">Java虚拟机 (JVM)</span><span data-lake-id="u35095f2d" id="u35095f2d">把.class转化为01</span></p><p data-lake-id="u62e340db" id="u62e340db"><span data-lake-id="uaf86f39a" id="uaf86f39a">JVM</span><span data-lake-id="u2f56bd02" id="u2f56bd02" style="color: #117CEE">针对不同硬件和平台做了对应开发</span><span data-lake-id="u23c2d416" id="u23c2d416">，屏蔽底层细节</span></p></details><details data-lake-id="ubdf19aa8" id="ubdf19aa8" open="true" class="lake-collapse"><summary data-lake-id="u61b4b883" id="u61b4b883" class="lake-summary"><strong><span data-lake-id="uede917ec" id="uede917ec">编译执行 VS 解释执行？</span></strong></summary><p data-lake-id="ud1dfbd00" id="ud1dfbd00"><span data-lake-id="u1825b1eb" id="u1825b1eb">以英文阅读为例：</span></p><ul list="u048c7312"><li fid="uaeec13e5" data-lake-id="uf22c8e19" id="uf22c8e19"><span data-lake-id="uaa302ddb" id="uaa302ddb">软件</span><span data-lake-id="u01d844fc" id="u01d844fc" style="color: #117CEE">翻译英文全文</span><span data-lake-id="u7ccdd2ec" id="u7ccdd2ec">再看，这是编译执行（效率更高）</span></li><li fid="uaeec13e5" data-lake-id="u06d8e3b7" id="u06d8e3b7"><span data-lake-id="u04951878" id="u04951878">边看英文边</span><span data-lake-id="u21ab1bda" id="u21ab1bda" style="color: #117CEE">逐句翻译</span><span data-lake-id="u7ac3eb70" id="u7ac3eb70">，这是解释执行</span></li></ul><p data-lake-id="u2a968b9e" id="u2a968b9e"><span data-lake-id="u5259a461" id="u5259a461">JVM一般解释执行，但对于热点代码通过JIT (Just In Time)即时编译为机器码编译执行</span></p></details><details data-lake-id="u757f7939" id="u757f7939" open="true" class="lake-collapse"><summary data-lake-id="u9dea9072" id="u9dea9072" class="lake-summary"><strong><span data-lake-id="u2662bd2a" id="u2662bd2a">JVM的内存区域是如何划分的？</span></strong></summary><p data-lake-id="u1bf041e0" id="u1bf041e0" style="text-align: center"><span data-lake-id="u39a7babc" id="u39a7babc" style="color: #117CEE">线程私有</span><span data-lake-id="u52cbc44e" id="u52cbc44e">，线程消亡自动回收，无需管理</span></p><ol list="uc803c5de"><li fid="uf24d50d1" data-lake-id="u0f7e80de" id="u0f7e80de"><strong><span data-lake-id="u8fa65c75" id="u8fa65c75">程序计数器</span></strong></li><li fid="uf24d50d1" data-lake-id="uec09b23b" id="uec09b23b"><strong><span data-lake-id="u27baeb51" id="u27baeb51">虚拟机栈：</span></strong><span data-lake-id="u0b2e9880" id="u0b2e9880">存储局部变量、方法出口、操作数栈</span></li><li fid="uf24d50d1" data-lake-id="u0744ccf6" id="u0744ccf6"><strong><span data-lake-id="u95ca8288" id="u95ca8288">本地方法栈：</span></strong><span data-lake-id="uf60487e5" id="uf60487e5">用于本地方法的调用，即native方法</span></li></ol><p data-lake-id="u0850840e" id="u0850840e" style="text-align: center"><span data-lake-id="uf39afa33" id="uf39afa33" style="color: #117CEE">线程共享</span><span data-lake-id="ud684c116" id="ud684c116">、需要垃圾回收器</span></p><ol list="uc803c5de" start="4"><li fid="uf24d50d1" data-lake-id="u962a1bb0" id="u962a1bb0"><strong><span data-lake-id="u761ea80b" id="u761ea80b">堆：</span></strong><span data-lake-id="u8d1610fd" id="u8d1610fd">存放new的对象实例和数组<br /></span><span data-lake-id="ua51f3292" id="ua51f3292">按垃圾回收堆可以分为新生代、老年代、永久代（Java8后被元空间取代，不在堆内了）</span></li><li fid="uf24d50d1" data-lake-id="ud2ed1ee7" id="ud2ed1ee7"><strong><span data-lake-id="uabb4483b" id="uabb4483b">方法区：</span></strong><span data-lake-id="u9d89e2d9" id="u9d89e2d9">存储类结构、常量、静态变量、JIT代码信息，<br /></span><span data-lake-id="u1b3388e6" id="u1b3388e6">元空间可以认为是方法区的一个实现，存储在堆外内存中</span></li></ol></details><details data-lake-id="u9e7a0600" id="u9e7a0600" open="true" class="lake-collapse"><summary data-lake-id="u9251f5b6" id="u9251f5b6" class="lake-summary"><strong><span data-lake-id="udf28c54b" id="udf28c54b">Java中堆和栈的区别是什么？</span></strong></summary><p data-lake-id="u50c43749" id="u50c43749"><strong><span data-lake-id="u7aa5b6bf" id="u7aa5b6bf">堆 (Heap)：</span></strong></p><ul list="uf92adc23"><li fid="u09c957c1" data-lake-id="u01291295" id="u01291295"><span data-lake-id="u3f0bf2f4" id="u3f0bf2f4">存储对象实例和数组。new创建对象时，JVM在堆上为该对象分配内存空间。</span></li><li fid="u09c957c1" data-lake-id="udd11cf17" id="udd11cf17"><span data-lake-id="uca7924ee" id="uca7924ee">通过GC进行回收，生命周期较长</span></li><li fid="u09c957c1" data-lake-id="u32d75701" id="u32d75701"><span data-lake-id="uc1f9b58e" id="uc1f9b58e" style="color: #117CEE">大小不固定</span><span data-lake-id="u816c5b0d" id="u816c5b0d">，根据对象划分</span></li></ul><p data-lake-id="u9e57be30" id="u9e57be30"><strong><span data-lake-id="uec7093fa" id="uec7093fa">栈 (Stack)：</span></strong></p><ul list="uba03fe2f"><li fid="u91248512" data-lake-id="uc42305c6" id="uc42305c6"><span data-lake-id="u4e4a64cd" id="u4e4a64cd">存储局部变量和方法的调用信息（返回地址、参数）。局部变量、引用变量（不包含引用的对象）被创建在栈上，在方法结束时被销毁。</span></li><li fid="u91248512" data-lake-id="u5bda0b89" id="u5bda0b89"><span data-lake-id="uf5b99341" id="uf5b99341">栈空间</span><span data-lake-id="u2ceafa35" id="u2ceafa35" style="color: #117CEE">不会被回收，生命周期短暂</span></li><li fid="u91248512" data-lake-id="udf312d28" id="udf312d28"><span data-lake-id="u31ce53db" id="u31ce53db" style="color: #117CEE">大小固定</span><span data-lake-id="u0b665ed1" id="u0b665ed1">，64位操作系统则大小为8字节</span></li></ul><p data-lake-id="u8dbb87b1" id="u8dbb87b1"><strong><span data-lake-id="u2dacbb17" id="u2dacbb17">注意：</span></strong><span data-lake-id="uc764d7ed" id="uc764d7ed">引用数据类型A a = new A(); // a分配到栈空间的是一个地址，指向堆中实例化的A</span></p></details><p data-lake-id="u6c8c1561" id="u6c8c1561"><br></p><h1 data-lake-id="u1hRk" id="u1hRk"><span data-lake-id="u8a43eb34" id="u8a43eb34">MySQL面试题（周四）</span></h1><details data-lake-id="ubbd202a7" id="ubbd202a7" open="false" class="lake-collapse"><summary data-lake-id="ue51cb225" id="ue51cb225" class="lake-summary"><strong><span data-lake-id="ube4dc398" id="ube4dc398">MySQL中数据排序怎么实现</span></strong></summary><ul list="u24861229"><li fid="u73e6a3c1" data-lake-id="u3f75a7f0" id="u3f75a7f0"><span data-lake-id="u7c37b461" id="u7c37b461">如果排序字段</span><span data-lake-id="u6c9e508b" id="u6c9e508b" style="color: #117CEE">命中索引</span><span data-lake-id="ud6100273" id="ud6100273">，则使用索引排序</span></li></ul><ul list="u24861229" data-lake-indent="1"><li fid="u73e6a3c1" data-lake-id="u3cc322f6" id="u3cc322f6"><span data-lake-id="u5d2e256f" id="u5d2e256f">查询的orderby子句包含的字段已经在索引中 &amp;&amp; 索引排序和orderby子句一致</span></li><li fid="u73e6a3c1" data-lake-id="u1bb44d91" id="u1bb44d91"><span data-lake-id="ude94e387" id="ude94e387">效率最高，因为索引有序</span></li></ul><ul list="u24861229" start="2"><li fid="u73e6a3c1" data-lake-id="u35ac00ff" id="u35ac00ff"><span data-lake-id="u976fd5b1" id="u976fd5b1">否则使用文件排序</span></li></ul><ul list="u24861229" data-lake-indent="1"><li fid="u73e6a3c1" data-lake-id="u2c628dff" id="u2c628dff"><span data-lake-id="u89770ea4" id="u89770ea4">如果数据量少，在内存中排序（sort_buffer 单路排序 / 双路排序）</span></li></ul><ul list="u24861229" data-lake-indent="2"><li fid="u73e6a3c1" data-lake-id="u771d3f13" id="u771d3f13"><span data-lake-id="u0f234b04" id="u0f234b04" style="color: #117CEE">双路排序</span><span data-lake-id="ua61287bb" id="ua61287bb">：查询的表单行&gt;max_length_for_sort_data。为了节省排序占用的空间sort_buffer只放置id和b。两次查询，回表操作。</span></li></ul><ul list="u24861229" start="2" data-lake-indent="1"><li fid="u73e6a3c1" data-lake-id="u0d9005a7" id="u0d9005a7"><span data-lake-id="uf4ce6bbe" id="uf4ce6bbe">数据量大，利用磁盘临时文件排序（</span><span data-lake-id="u8fb605cc" id="u8fb605cc" style="color: #117CEE">归并</span><span data-lake-id="u86fc7e0f" id="u86fc7e0f">排序），性能较差</span></li></ul><p data-lake-id="uaadb5239" id="uaadb5239"><span data-lake-id="ue8e9ed95" id="ue8e9ed95">​</span><br></p></details><details data-lake-id="uc4f150c6" id="uc4f150c6" open="false" class="lake-collapse"><summary data-lake-id="ude1e2047" id="ude1e2047" class="lake-summary"><strong><span data-lake-id="ub259e1c3" id="ub259e1c3">MySQL的ChangeBuffer作用</span></strong></summary><p data-lake-id="ud4141f65" id="ud4141f65"><strong><span data-lake-id="u41c348d0" id="u41c348d0">描述：</span></strong><span data-lake-id="u886f1127" id="u886f1127">如果当前需要操作的数据页不在buffer pool中，那么innodb会把</span><span data-lake-id="u9c1a7301" id="u9c1a7301" style="color: #117CEE">更新操作缓存</span><span data-lake-id="u676d0a2b" id="u676d0a2b">到change buffer中，当下次访问到这条数据后，把数据页加载到buffer pool中，并且应用 change buffer里的变更</span></p><p data-lake-id="uccdee5a1" id="uccdee5a1"><strong><span data-lake-id="u14b6a562" id="u14b6a562">好处：</span></strong><span data-lake-id="uc08d6717" id="uc08d6717" style="color: #117CEE">避免对二级索引页修改而产生的随机I/O</span></p><p data-lake-id="u7fbb11f5" id="u7fbb11f5"><strong><span data-lake-id="u5672eed4" id="u5672eed4">注意：</span></strong></p><ul list="u402e64ca"><li fid="u859c40da" data-lake-id="ue3ced34c" id="ue3ced34c"><span data-lake-id="uea288a1a" id="uea288a1a">change buffer只能用于二级索引的更改，不适用于主键索引、空间索引、全文索引、唯一索引（因为需要读取数据并检查一致性）。</span></li><li fid="u859c40da" data-lake-id="uec08ffa0" id="uec08ffa0"><span data-lake-id="u6585ec97" id="u6585ec97">change buffer也会</span><span data-lake-id="u5c6dda7b" id="u5c6dda7b" style="color: #117CEE">落盘到系统表空间</span><span data-lake-id="u45848a65" id="u45848a65">里，</span><span data-lake-id="u213ae1db" id="u213ae1db" style="color: #117CEE">redo log会记录</span><span data-lake-id="u376e83fe" id="u376e83fe">change buffer的修改保证数据一致性。</span></li></ul></details><details data-lake-id="u5713cb0a" id="u5713cb0a" open="false" class="lake-collapse"><summary data-lake-id="u33cac5bb" id="u33cac5bb" class="lake-summary"><strong><span data-lake-id="ucc16e498" id="ucc16e498">详细描述一条SQL语句在MySQL的执行过程</span></strong></summary><ol list="u697d6ec1"><li fid="u2c522829" data-lake-id="u16f2c77a" id="u16f2c77a"><strong><span data-lake-id="u355a5dc7" id="u355a5dc7">Server层：</span></strong><span data-lake-id="u56176e74" id="u56176e74">涉及一系列业务组件（</span><span data-lake-id="u36efedb2" id="u36efedb2" style="color: #DF2A3F">连接缓存分析优化执行</span><span data-lake-id="u6d2ec2ce" id="u6d2ec2ce">）</span></li></ol><ol list="u697d6ec1" data-lake-indent="1"><li fid="u2c522829" data-lake-id="u76e17622" id="u76e17622"><strong><span data-lake-id="u7719d481" id="u7719d481">连接器：</span></strong><span data-lake-id="u946c0f07" id="u946c0f07">权限校验</span></li><li fid="u2c522829" data-lake-id="u58671d36" id="u58671d36"><strong><span data-lake-id="u10684843" id="u10684843">查询缓存：</span></strong><span data-lake-id="uf0e0980d" id="uf0e0980d">MySQL8.0后废弃，相同语句查询立马返回结果</span></li><li fid="u2c522829" data-lake-id="u78ff6369" id="u78ff6369"><strong><span data-lake-id="uf94a8a84" id="uf94a8a84">分析器：</span></strong><span data-lake-id="u05bb43b3" id="u05bb43b3">词法分析、语法分析</span></li><li fid="u2c522829" data-lake-id="ub5298945" id="ub5298945"><strong><span data-lake-id="uef73e519" id="uef73e519">优化器：</span></strong><span data-lake-id="u5f7a28d2" id="u5f7a28d2">帮助</span><span data-lake-id="u0ee81c94" id="u0ee81c94" style="color: #117CEE">选择多个索引中的一个</span><span data-lake-id="u3f281f73" id="u3f281f73">、调整表的</span><span data-lake-id="u7759ea9a" id="u7759ea9a" style="color: #117CEE">连接顺序</span></li><li fid="u2c522829" data-lake-id="u7ed7ae89" id="u7ed7ae89"><strong><span data-lake-id="u8cf18689" id="u8cf18689">执行器：</span></strong><span data-lake-id="uffb90586" id="uffb90586">根据存储引擎的接口，遍历符合条件的数据作为结果返回</span></li></ol><ol list="u697d6ec1" start="2"><li fid="u2c522829" data-lake-id="u5932e055" id="u5932e055"><strong><span data-lake-id="u52cf101d" id="u52cf101d">存储引擎层：</span></strong><span data-lake-id="u58ee333a" id="u58ee333a">负责存储数据、提供读写接口</span><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F32436878%2F1724933318113-12c5a159-732b-4156-83ad-308a38d4735b.png%22%2C%22taskId%22%3A%22u460712fc-1f20-45e0-a215-156fc4c3d0e%22%2C%22clientId%22%3A%22ubea471da-e2c6-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A677.0068554267252%2C%22height%22%3A549%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A191199%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1244%2C%22originHeight%22%3A1009%2C%22ratio%22%3A1.8374998569488525%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22MYSQL%20SERVER%20%E5%B1%82%20%E8%BF%9E%E6%8E%A5%E5%99%A8%20%E8%BF%9E%E6%8E%A5%E8%BF%9B%E8%A1%8C%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C%20%E7%BC%93%E5%AD%98%E5%B1%82%20%E7%BC%93%E5%AD%98%E5%91%BD%E4%B8%AD%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%20%E5%88%86%E6%9E%90%E5%99%A8%20%E8%BF%9B%E8%A1%8C%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%2C%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%20(8.0%E9%81%97%E5%BC%83)%20%E7%94%9F%E6%88%90%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%2C%E9%80%89%E6%8B%A9%E7%B4%A2%E5%BC%95%E4%BB%A5%E5%8F%8A%E8%BF%9E%E8%A1%A8%E9%A1%BA%E5%BA%8F%20%E4%BC%98%E5%8C%96%E5%99%A8%20%E6%89%A7%E8%A1%8C%E5%99%A8%20%E6%93%8D%E4%BD%9C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%8F%90%E4%BE%9B%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%B1%82%20MYLSAM%20INNODB%20%E9%9D%A2%E8%AF%95%E9%B8%AD%20RNIANSHIYA.COM%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A472%2C%22y%22%3A42%2C%22width%22%3A70%2C%22height%22%3A23%2C%22text%22%3A%22MYSQL%22%7D%2C%7B%22x%22%3A476%2C%22y%22%3A125%2C%22width%22%3A84%2C%22height%22%3A19%2C%22text%22%3A%22SERVER%20%E5%B1%82%22%7D%2C%7B%22x%22%3A475%2C%22y%22%3A192%2C%22width%22%3A67%2C%22height%22%3A22%2C%22text%22%3A%22%E8%BF%9E%E6%8E%A5%E5%99%A8%22%7D%2C%7B%22x%22%3A839%2C%22y%22%3A191%2C%22width%22%3A183%2C%22height%22%3A25%2C%22text%22%3A%22%E8%BF%9E%E6%8E%A5%E8%BF%9B%E8%A1%8C%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C%22%7D%2C%7B%22x%22%3A361%2C%22y%22%3A296%2C%22width%22%3A68%2C%22height%22%3A22%2C%22text%22%3A%22%E7%BC%93%E5%AD%98%E5%B1%82%22%7D%2C%7B%22x%22%3A30%2C%22y%22%3A316%2C%22width%22%3A184%2C%22height%22%3A23%2C%22text%22%3A%22%E7%BC%93%E5%AD%98%E5%91%BD%E4%B8%AD%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%22%7D%2C%7B%22x%22%3A601%2C%22y%22%3A317%2C%22width%22%3A67%2C%22height%22%3A22%2C%22text%22%3A%22%E5%88%86%E6%9E%90%E5%99%A8%22%7D%2C%7B%22x%22%3A832%2C%22y%22%3A323%2C%22width%22%3A252%2C%22height%22%3A24%2C%22text%22%3A%22%E8%BF%9B%E8%A1%8C%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%2C%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%22%7D%2C%7B%22x%22%3A344%2C%22y%22%3A335%2C%22width%22%3A101%2C%22height%22%3A23%2C%22text%22%3A%22(8.0%E9%81%97%E5%BC%83)%22%7D%2C%7B%22x%22%3A817%2C%22y%22%3A445%2C%22width%22%3A391%2C%22height%22%3A26%2C%22text%22%3A%22%E7%94%9F%E6%88%90%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%2C%E9%80%89%E6%8B%A9%E7%B4%A2%E5%BC%95%E4%BB%A5%E5%8F%8A%E8%BF%9E%E8%A1%A8%E9%A1%BA%E5%BA%8F%22%7D%2C%7B%22x%22%3A602%2C%22y%22%3A447%2C%22width%22%3A65%2C%22height%22%3A22%2C%22text%22%3A%22%E4%BC%98%E5%8C%96%E5%99%A8%22%7D%2C%7B%22x%22%3A599%2C%22y%22%3A576%2C%22width%22%3A67%2C%22height%22%3A22%2C%22text%22%3A%22%E6%89%A7%E8%A1%8C%E5%99%A8%22%7D%2C%7B%22x%22%3A804%2C%22y%22%3A576%2C%22width%22%3A323%2C%22height%22%3A25%2C%22text%22%3A%22%E6%93%8D%E4%BD%9C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%8F%90%E4%BE%9B%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%22%7D%2C%7B%22x%22%3A464%2C%22y%22%3A741%2C%22width%22%3A112%2C%22height%22%3A22%2C%22text%22%3A%22%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%B1%82%22%7D%2C%7B%22x%22%3A353%2C%22y%22%3A862%2C%22width%22%3A84%2C%22height%22%3A23%2C%22text%22%3A%22MYLSAM%22%7D%2C%7B%22x%22%3A615%2C%22y%22%3A864%2C%22width%22%3A73%2C%22height%22%3A20%2C%22text%22%3A%22INNODB%22%7D%2C%7B%22x%22%3A1111%2C%22y%22%3A905%2C%22width%22%3A92%2C%22height%22%3A33%2C%22text%22%3A%22%E9%9D%A2%E8%AF%95%E9%B8%AD%22%7D%2C%7B%22x%22%3A993%2C%22y%22%3A947%2C%22width%22%3A210%2C%22height%22%3A30%2C%22text%22%3A%22RNIANSHIYA.COM%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e0dfb0%22%2C%22id%22%3A%22u31b6b907%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></li></ol></details><details data-lake-id="u9edb8155" id="u9edb8155" open="false" class="lake-collapse"><summary data-lake-id="ubf3a04e5" id="ubf3a04e5" class="lake-summary"><strong><span data-lake-id="u77b6b85f" id="u77b6b85f">MySQL存储引擎有哪些？区别是什么？</span></strong></summary><p data-lake-id="u9a0f9805" id="u9a0f9805"><span data-lake-id="uba056cce" id="uba056cce">MySQL8.4提供了10个引擎</span></p><p data-lake-id="u292e93b8" id="u292e93b8"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F32436878%2F1724933665378-1b31a33b-b2b9-4e38-98ae-a3ab8a491d8c.png%22%2C%22taskId%22%3A%22ud58b3db7-6fbf-4af6-a8f3-88be2af484c%22%2C%22clientId%22%3A%22ubea471da-e2c6-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A584.2976379394531%2C%22height%22%3A744%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A131489%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A855%2C%22originHeight%22%3A1088%2C%22ratio%22%3A1.8374998569488525%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%AF%8F%E7%A7%8D%E5%BC%95%E6%93%8E%E9%83%BD%E6%9C%89%E5%85%B6%E7%89%B9%E5%AE%9A%E7%9A%84%E7%89%B9%E6%80%A7%E5%92%8C%E7%94%A8%E9%80%94%2C%E4%BD%86%E7%9B%B8%E5%AF%B9%E8%80%8C%E8%A8%80%E6%AF%94%E8%BE%83%E5%B8%B8%E8%A7%81%E7%9A%84%E6%98%AF%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%3A%20%E7%89%B9%E6%80%A7%20MEMORY%20ARCHIVE%20INNODB%20NDB%20MYLSAM%20B%2B%E6%A0%91%E7%B4%A2%E5%BC%95%20NO%20YES%20YES%20NO%20YES%20%E5%A4%87%E4%BB%BD%2F%E6%8C%89%E6%97%B6%E9%97%B4%E7%82%B9%E6%81%A2%E5%A4%8D%20YES%20YES%20YES%20YES%20YES%20%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81%20NO%20NO%20NO%20YES%20NO%20%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%20NO%20NO%20NO%20NO%20YES%20%E5%8E%8B%E7%BC%A9%E6%95%B0%E6%8D%AE%20YES%20YES%20NO%20NO%20YES%20%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98%20NO%20N%2FA%20YES%20NO%20YES%20%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%20YES%20YES%20YES%20YES%20YES%20%E5%A4%96%E9%94%AE%E6%94%AF%E6%8C%81%20NO%20YES%20YES%20NO%20NO%20%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%20NO%20YES%20NO%20NO%20YES%20%E5%9C%B0%E7%90%86%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%94%AF%E6%8C%81%20NO%20YES%20YES%20YES%20YES%20%E5%9C%B0%E7%90%86%E7%A9%BA%E9%97%B4%E7%B4%A2%E5%BC%95%E6%94%AF%E6%8C%81%20NO%20NO%20NO%20YES%20YES%20%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95%20NO%20NO%20YES%20YES%20NO%20%E7%B4%A2%E5%BC%95%E7%BC%93%E5%AD%98%20NO%20YES%20YES%20N%2FA%20YES%20%E9%94%81%E7%9A%84%E7%B2%92%E5%BA%A6%20TABLE%20TABLE%20ROW%20ROW%20ROW%20NO%20NO%20MVCC%20NO%20YES%20NO%20%E5%A4%8D%E5%88%B6%E6%94%AF%E6%8C%81%20YES%20LIMITED%20YES%20YES%20YES%20%E5%AD%98%E5%82%A8%E9%99%90%E5%88%B6%20NONE%2064TB%20384EB%20256TB%20RAM%20T-TREE%E7%B4%A2%E5%BC%95%20NO%20NO%20NO%20NO%20YES%20%E4%BA%8B%E5%8A%A1%20YES%20NO%20NO%20YES%20NO%20%E4%BF%9DINNODB%E5%92%8CMYLSAM%E5%8D%B3%E5%8F%AF%2C%E5%85%B6%E5%AE%83%E4%BB%85%E9%9C%80%E6%9C%89%E7%82%B9%E5%8D%B0%E8%B1%A1%E5%8D%B3%E5%8F%AF.%20%E5%AE%9E%E9%99%85%E4%B8%8A%E6%88%91%E4%BB%AC%E4%BB%85%E9%9C%80%E9%87%8D%E7%82%B9%E4%BA%86%E8%A7%A3IN%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A22%2C%22y%22%3A17%2C%22width%22%3A662%2C%22height%22%3A23%2C%22text%22%3A%22%E6%AF%8F%E7%A7%8D%E5%BC%95%E6%93%8E%E9%83%BD%E6%9C%89%E5%85%B6%E7%89%B9%E5%AE%9A%E7%9A%84%E7%89%B9%E6%80%A7%E5%92%8C%E7%94%A8%E9%80%94%2C%E4%BD%86%E7%9B%B8%E5%AF%B9%E8%80%8C%E8%A8%80%E6%AF%94%E8%BE%83%E5%B8%B8%E8%A7%81%E7%9A%84%E6%98%AF%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%3A%22%7D%2C%7B%22x%22%3A123%2C%22y%22%3A78%2C%22width%22%3A45%2C%22height%22%3A22%2C%22text%22%3A%22%E7%89%B9%E6%80%A7%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A80%2C%22width%22%3A84%2C%22height%22%3A23%2C%22text%22%3A%22MEMORY%22%7D%2C%7B%22x%22%3A624%2C%22y%22%3A80%2C%22width%22%3A72%2C%22height%22%3A19%2C%22text%22%3A%22ARCHIVE%22%7D%2C%7B%22x%22%3A518%2C%22y%22%3A80%2C%22width%22%3A72%2C%22height%22%3A18%2C%22text%22%3A%22INNODB%22%7D%2C%7B%22x%22%3A737%2C%22y%22%3A81%2C%22width%22%3A45%2C%22height%22%3A18%2C%22text%22%3A%22NDB%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A79%2C%22width%22%3A84%2C%22height%22%3A22%2C%22text%22%3A%22MYLSAM%22%7D%2C%7B%22x%22%3A39%2C%22y%22%3A127%2C%22width%22%3A88%2C%22height%22%3A21%2C%22text%22%3A%22B%2B%E6%A0%91%E7%B4%A2%E5%BC%95%22%7D%2C%7B%22x%22%3A622%2C%22y%22%3A127%2C%22width%22%3A31%2C%22height%22%3A20%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A517%2C%22y%22%3A128%2C%22width%22%3A33%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A284%2C%22y%22%3A128%2C%22width%22%3A34%2C%22height%22%3A19%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A730%2C%22y%22%3A129%2C%22width%22%3A29%2C%22height%22%3A17%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A129%2C%22width%22%3A32%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A39%2C%22y%22%3A173%2C%22width%22%3A179%2C%22height%22%3A24%2C%22text%22%3A%22%E5%A4%87%E4%BB%BD%2F%E6%8C%89%E6%97%B6%E9%97%B4%E7%82%B9%E6%81%A2%E5%A4%8D%22%7D%2C%7B%22x%22%3A727%2C%22y%22%3A176%2C%22width%22%3A33%2C%22height%22%3A19%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A622%2C%22y%22%3A176%2C%22width%22%3A34%2C%22height%22%3A19%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A400%2C%22y%22%3A177%2C%22width%22%3A32%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A516%2C%22y%22%3A177%2C%22width%22%3A32%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A284%2C%22y%22%3A178%2C%22width%22%3A32%2C%22height%22%3A16%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A40%2C%22y%22%3A223%2C%22width%22%3A148%2C%22height%22%3A23%2C%22text%22%3A%22%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81%22%7D%2C%7B%22x%22%3A516%2C%22y%22%3A224%2C%22width%22%3A31%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A622%2C%22y%22%3A224%2C%22width%22%3A30%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A226%2C%22width%22%3A29%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A729%2C%22y%22%3A226%2C%22width%22%3A32%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A286%2C%22y%22%3A226%2C%22width%22%3A29%2C%22height%22%3A16%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A38%2C%22y%22%3A270%2C%22width%22%3A87%2C%22height%22%3A24%2C%22text%22%3A%22%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A272%2C%22width%22%3A30%2C%22height%22%3A20%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A623%2C%22y%22%3A272%2C%22width%22%3A31%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A728%2C%22y%22%3A273%2C%22width%22%3A31%2C%22height%22%3A19%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A273%2C%22width%22%3A30%2C%22height%22%3A19%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A516%2C%22y%22%3A273%2C%22width%22%3A34%2C%22height%22%3A19%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A41%2C%22y%22%3A319%2C%22width%22%3A85%2C%22height%22%3A22%2C%22text%22%3A%22%E5%8E%8B%E7%BC%A9%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A283%2C%22y%22%3A320%2C%22width%22%3A35%2C%22height%22%3A21%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A516%2C%22y%22%3A321%2C%22width%22%3A35%2C%22height%22%3A19%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A730%2C%22y%22%3A321%2C%22width%22%3A29%2C%22height%22%3A19%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A321%2C%22width%22%3A30%2C%22height%22%3A19%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A623%2C%22y%22%3A322%2C%22width%22%3A32%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A40%2C%22y%22%3A367%2C%22width%22%3A86%2C%22height%22%3A21%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A622%2C%22y%22%3A369%2C%22width%22%3A32%2C%22height%22%3A20%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A400%2C%22y%22%3A369%2C%22width%22%3A41%2C%22height%22%3A20%2C%22text%22%3A%22N%2FA%22%7D%2C%7B%22x%22%3A729%2C%22y%22%3A369%2C%22width%22%3A32%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A369%2C%22width%22%3A30%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A516%2C%22y%22%3A370%2C%22width%22%3A34%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A40%2C%22y%22%3A417%2C%22width%22%3A86%2C%22height%22%3A21%2C%22text%22%3A%22%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A728%2C%22y%22%3A418%2C%22width%22%3A32%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A621%2C%22y%22%3A418%2C%22width%22%3A34%2C%22height%22%3A19%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A400%2C%22y%22%3A418%2C%22width%22%3A33%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A517%2C%22y%22%3A419%2C%22width%22%3A33%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A286%2C%22y%22%3A419%2C%22width%22%3A31%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A41%2C%22y%22%3A464%2C%22width%22%3A84%2C%22height%22%3A23%2C%22text%22%3A%22%E5%A4%96%E9%94%AE%E6%94%AF%E6%8C%81%22%7D%2C%7B%22x%22%3A622%2C%22y%22%3A465%2C%22width%22%3A31%2C%22height%22%3A19%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A729%2C%22y%22%3A466%2C%22width%22%3A32%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A517%2C%22y%22%3A466%2C%22width%22%3A33%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A467%2C%22width%22%3A29%2C%22height%22%3A17%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A286%2C%22y%22%3A467%2C%22width%22%3A29%2C%22height%22%3A17%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A41%2C%22y%22%3A510%2C%22width%22%3A83%2C%22height%22%3A23%2C%22text%22%3A%22%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%22%7D%2C%7B%22x%22%3A400%2C%22y%22%3A513%2C%22width%22%3A32%2C%22height%22%3A20%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A516%2C%22y%22%3A514%2C%22width%22%3A34%2C%22height%22%3A19%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A728%2C%22y%22%3A514%2C%22width%22%3A31%2C%22height%22%3A19%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A622%2C%22y%22%3A514%2C%22width%22%3A31%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A515%2C%22width%22%3A32%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A40%2C%22y%22%3A560%2C%22width%22%3A211%2C%22height%22%3A22%2C%22text%22%3A%22%E5%9C%B0%E7%90%86%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%94%AF%E6%8C%81%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A562%2C%22width%22%3A32%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A623%2C%22y%22%3A562%2C%22width%22%3A33%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A517%2C%22y%22%3A562%2C%22width%22%3A32%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A284%2C%22y%22%3A563%2C%22width%22%3A33%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A730%2C%22y%22%3A563%2C%22width%22%3A31%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A39%2C%22y%22%3A609%2C%22width%22%3A172%2C%22height%22%3A22%2C%22text%22%3A%22%E5%9C%B0%E7%90%86%E7%A9%BA%E9%97%B4%E7%B4%A2%E5%BC%95%E6%94%AF%E6%8C%81%22%7D%2C%7B%22x%22%3A728%2C%22y%22%3A611%2C%22width%22%3A31%2C%22height%22%3A19%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A622%2C%22y%22%3A611%2C%22width%22%3A32%2C%22height%22%3A19%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A612%2C%22width%22%3A30%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A516%2C%22y%22%3A612%2C%22width%22%3A33%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A613%2C%22width%22%3A31%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A40%2C%22y%22%3A657%2C%22width%22%3A84%2C%22height%22%3A22%2C%22text%22%3A%22%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95%22%7D%2C%7B%22x%22%3A623%2C%22y%22%3A657%2C%22width%22%3A30%2C%22height%22%3A19%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A516%2C%22y%22%3A658%2C%22width%22%3A32%2C%22height%22%3A19%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A660%2C%22width%22%3A33%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A730%2C%22y%22%3A660%2C%22width%22%3A30%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A286%2C%22y%22%3A660%2C%22width%22%3A28%2C%22height%22%3A16%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A39%2C%22y%22%3A704%2C%22width%22%3A87%2C%22height%22%3A23%2C%22text%22%3A%22%E7%B4%A2%E5%BC%95%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A623%2C%22y%22%3A707%2C%22width%22%3A31%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A729%2C%22y%22%3A707%2C%22width%22%3A33%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A284%2C%22y%22%3A707%2C%22width%22%3A33%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A707%2C%22width%22%3A40%2C%22height%22%3A18%2C%22text%22%3A%22N%2FA%22%7D%2C%7B%22x%22%3A517%2C%22y%22%3A708%2C%22width%22%3A32%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A40%2C%22y%22%3A753%2C%22width%22%3A85%2C%22height%22%3A21%2C%22text%22%3A%22%E9%94%81%E7%9A%84%E7%B2%92%E5%BA%A6%22%7D%2C%7B%22x%22%3A286%2C%22y%22%3A755%2C%22width%22%3A47%2C%22height%22%3A18%2C%22text%22%3A%22TABLE%22%7D%2C%7B%22x%22%3A399%2C%22y%22%3A755%2C%22width%22%3A52%2C%22height%22%3A19%2C%22text%22%3A%22TABLE%22%7D%2C%7B%22x%22%3A623%2C%22y%22%3A756%2C%22width%22%3A41%2C%22height%22%3A18%2C%22text%22%3A%22ROW%22%7D%2C%7B%22x%22%3A730%2C%22y%22%3A756%2C%22width%22%3A41%2C%22height%22%3A17%2C%22text%22%3A%22ROW%22%7D%2C%7B%22x%22%3A517%2C%22y%22%3A756%2C%22width%22%3A42%2C%22height%22%3A18%2C%22text%22%3A%22ROW%22%7D%2C%7B%22x%22%3A728%2C%22y%22%3A803%2C%22width%22%3A31%2C%22height%22%3A19%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A622%2C%22y%22%3A804%2C%22width%22%3A32%2C%22height%22%3A20%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A40%2C%22y%22%3A804%2C%22width%22%3A58%2C%22height%22%3A18%2C%22text%22%3A%22MVCC%22%7D%2C%7B%22x%22%3A400%2C%22y%22%3A804%2C%22width%22%3A30%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A517%2C%22y%22%3A805%2C%22width%22%3A32%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A805%2C%22width%22%3A29%2C%22height%22%3A17%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A40%2C%22y%22%3A850%2C%22width%22%3A85%2C%22height%22%3A22%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%E6%94%AF%E6%8C%81%22%7D%2C%7B%22x%22%3A622%2C%22y%22%3A852%2C%22width%22%3A33%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A402%2C%22y%22%3A852%2C%22width%22%3A69%2C%22height%22%3A18%2C%22text%22%3A%22LIMITED%22%7D%2C%7B%22x%22%3A728%2C%22y%22%3A852%2C%22width%22%3A33%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A517%2C%22y%22%3A853%2C%22width%22%3A32%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A286%2C%22y%22%3A853%2C%22width%22%3A30%2C%22height%22%3A17%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A39%2C%22y%22%3A898%2C%22width%22%3A86%2C%22height%22%3A22%2C%22text%22%3A%22%E5%AD%98%E5%82%A8%E9%99%90%E5%88%B6%22%7D%2C%7B%22x%22%3A623%2C%22y%22%3A899%2C%22width%22%3A53%2C%22height%22%3A19%2C%22text%22%3A%22NONE%22%7D%2C%7B%22x%22%3A517%2C%22y%22%3A899%2C%22width%22%3A49%2C%22height%22%3A19%2C%22text%22%3A%2264TB%22%7D%2C%7B%22x%22%3A729%2C%22y%22%3A899%2C%22width%22%3A58%2C%22height%22%3A19%2C%22text%22%3A%22384EB%22%7D%2C%7B%22x%22%3A286%2C%22y%22%3A900%2C%22width%22%3A57%2C%22height%22%3A18%2C%22text%22%3A%22256TB%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A900%2C%22width%22%3A48%2C%22height%22%3A18%2C%22text%22%3A%22RAM%22%7D%2C%7B%22x%22%3A39%2C%22y%22%3A947%2C%22width%22%3A104%2C%22height%22%3A22%2C%22text%22%3A%22T-TREE%E7%B4%A2%E5%BC%95%22%7D%2C%7B%22x%22%3A401%2C%22y%22%3A948%2C%22width%22%3A30%2C%22height%22%3A20%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A622%2C%22y%22%3A948%2C%22width%22%3A31%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A517%2C%22y%22%3A949%2C%22width%22%3A31%2C%22height%22%3A18%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A284%2C%22y%22%3A949%2C%22width%22%3A31%2C%22height%22%3A17%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A730%2C%22y%22%3A949%2C%22width%22%3A30%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A37%2C%22y%22%3A994%2C%22width%22%3A46%2C%22height%22%3A23%2C%22text%22%3A%22%E4%BA%8B%E5%8A%A1%22%7D%2C%7B%22x%22%3A730%2C%22y%22%3A998%2C%22width%22%3A31%2C%22height%22%3A18%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A998%2C%22width%22%3A30%2C%22height%22%3A17%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A625%2C%22y%22%3A998%2C%22width%22%3A28%2C%22height%22%3A17%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A519%2C%22y%22%3A998%2C%22width%22%3A30%2C%22height%22%3A16%2C%22text%22%3A%22YES%22%7D%2C%7B%22x%22%3A403%2C%22y%22%3A998%2C%22width%22%3A28%2C%22height%22%3A17%2C%22text%22%3A%22NO%22%7D%2C%7B%22x%22%3A253%2C%22y%22%3A1054%2C%22width%22%3A473%2C%22height%22%3A25%2C%22text%22%3A%22%E4%BF%9DINNODB%E5%92%8CMYLSAM%E5%8D%B3%E5%8F%AF%2C%E5%85%B6%E5%AE%83%E4%BB%85%E9%9C%80%E6%9C%89%E7%82%B9%E5%8D%B0%E8%B1%A1%E5%8D%B3%E5%8F%AF.%22%7D%2C%7B%22x%22%3A23%2C%22y%22%3A1056%2C%22width%22%3A247%2C%22height%22%3A24%2C%22text%22%3A%22%E5%AE%9E%E9%99%85%E4%B8%8A%E6%88%91%E4%BB%AC%E4%BB%85%E9%9C%80%E9%87%8D%E7%82%B9%E4%BA%86%E8%A7%A3IN%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f1eff2%22%2C%22id%22%3A%22u4762a358%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u813d0e4c" id="u813d0e4c"><strong><span data-lake-id="u31c288da" id="u31c288da">​</span></strong><br></p><p data-lake-id="u6d1a0289" id="u6d1a0289"><strong><span data-lake-id="u06cfc45d" id="u06cfc45d">InnoDB</span></strong></p><p data-lake-id="u21f8d44c" id="u21f8d44c"><strong><span data-lake-id="u67913972" id="u67913972">特性：</span></strong><span data-lake-id="uaa1a336b" id="uaa1a336b">InnoDB是MySQL的默认存储引擎。它支持</span><span data-lake-id="u72f790e9" id="u72f790e9" style="color: #117CEE">事务处理</span><span data-lake-id="u904339c7" id="u904339c7">、</span><span data-lake-id="uac8b90f3" id="uac8b90f3" style="color: #117CEE">行级锁定</span><span data-lake-id="ub7b32bc1" id="ub7b32bc1">和</span><span data-lake-id="ua79e850f" id="ua79e850f" style="color: #117CEE">外键</span><span data-lake-id="u6bdb84ae" id="u6bdb84ae">等特性。</span></p><p data-lake-id="uf66ab804" id="uf66ab804"><strong><span data-lake-id="ub2654c57" id="ub2654c57">优点：</span></strong><span data-lake-id="u6357708a" id="u6357708a">支持高并发、提供事务支持、行级锁定减少了锁定资源、支持外键等。</span></p><p data-lake-id="u18bfffbe" id="u18bfffbe"><strong><span data-lake-id="u3ca1bbd1" id="u3ca1bbd1">缺点：</span></strong><span data-lake-id="ub57582d4" id="ub57582d4" style="color: #117CEE">读写效率较差，占用磁盘空间较大</span><span data-lake-id="u9bf51617" id="u9bf51617">。</span></p><p data-lake-id="u2863dcde" id="u2863dcde"><strong><span data-lake-id="u174cf745" id="u174cf745">适用场景：</span></strong><span data-lake-id="u07e77d18" id="u07e77d18">需要事务处理、外键等高级数据库特性的应用。</span></p><p data-lake-id="u32f577e2" id="u32f577e2"><span data-lake-id="u9ccc2a7b" id="u9ccc2a7b">​</span><br></p><p data-lake-id="u48a6320e" id="u48a6320e"><strong><span data-lake-id="ua85e03b8" id="ua85e03b8">MylSAM</span></strong></p><p data-lake-id="uc6d2d190" id="uc6d2d190"><strong><span data-lake-id="ubf7c9cc0" id="ubf7c9cc0">特性：</span></strong><span data-lake-id="u6d733027" id="u6d733027">MylSAM是MySQL早期默认引擎，不支持事务处理，但具有较高的读取速度和全文索引能力。</span></p><p data-lake-id="ubec20daf" id="ubec20daf"><strong><span data-lake-id="uec197e4a" id="uec197e4a">优点：</span></strong><span data-lake-id="u92bf6ac3" id="u92bf6ac3" style="color: #117CEE">读取速度快</span><span data-lake-id="u62d3764a" id="u62d3764a">，占用空间相对于InnoDB较小，支持全文索引。</span></p><p data-lake-id="u48032c58" id="u48032c58"><strong><span data-lake-id="uf5366b05" id="uf5366b05">缺点：</span></strong><span data-lake-id="u1f55aeaf" id="u1f55aeaf">不支持事务处理、行级锁(只支持表级锁)，在高并发写入时性能较差。</span></p><p data-lake-id="ue5d72136" id="ue5d72136"><strong><span data-lake-id="ub7bda158" id="ub7bda158">适用场景：</span></strong><span data-lake-id="u570e7937" id="u570e7937">以读操作为主、不需要事务支持的应用。</span></p></details><details data-lake-id="uda755e84" id="uda755e84" open="true" class="lake-collapse"><summary data-lake-id="u03499fe9" id="u03499fe9" class="lake-summary"><strong><span data-lake-id="u70ae310a" id="u70ae310a">MySQL的索引类型有哪些？</span></strong></summary><p data-lake-id="u7689f3cb" id="u7689f3cb"><span data-lake-id="ubcf9a12a" id="ubcf9a12a">索引结构：</span></p><ul list="ua06380c6"><li fid="u87736a85" data-lake-id="uf990252d" id="uf990252d"><span data-lake-id="u03b0d783" id="u03b0d783">B+树索引：适用于范围查询和排序</span></li><li fid="u87736a85" data-lake-id="ue0040b17" id="ue0040b17"><span data-lake-id="ue445ef79" id="ue445ef79">哈希索引：只适用于精确匹配查询</span></li><li fid="u87736a85" data-lake-id="u7f7dda52" id="u7f7dda52"><span data-lake-id="u5eaaf5bd" id="u5eaaf5bd">倒排索引（Full-Text）：允许关键字搜索和模糊匹配</span></li><li fid="u87736a85" data-lake-id="u379ec998" id="u379ec998"><span data-lake-id="u5cc32bff" id="u5cc32bff">R-树索引（多维空间树）：地理位置和几何形状</span></li></ul><p data-lake-id="ub270540b" id="ub270540b"><span data-lake-id="u560c4ca6" id="u560c4ca6">索引分类：</span></p><ul list="u55829418"><li fid="u2514dc6d" data-lake-id="u9d9670b3" id="u9d9670b3"><span data-lake-id="ua2a48a62" id="ua2a48a62">主键索引</span></li><li fid="u2514dc6d" data-lake-id="ub104ba9f" id="ub104ba9f"><span data-lake-id="u6a514f41" id="u6a514f41">唯一索引</span></li><li fid="u2514dc6d" data-lake-id="u07fce4e7" id="u07fce4e7"><span data-lake-id="u040aadb6" id="u040aadb6">常规索引</span></li><li fid="u2514dc6d" data-lake-id="uff87490f" id="uff87490f"><span data-lake-id="ued903cc0" id="ued903cc0">全文索引</span></li></ul></details><details data-lake-id="ud163d8f8" id="ud163d8f8" open="true" class="lake-collapse"><summary data-lake-id="u1ee22b53" id="u1ee22b53" class="lake-summary"><strong><span data-lake-id="u421d687b" id="u421d687b">MySQL InnoDB引擎中的聚簇索引vs非聚簇索引</span></strong></summary><p data-lake-id="u37af596c" id="u37af596c"><span data-lake-id="u50ecb7f7" id="u50ecb7f7">聚簇索引：</span></p><ul list="u4ae71716"><li fid="u166afe1d" data-lake-id="ucc361e51" id="ucc361e51"><span data-lake-id="u9c734677" id="u9c734677">叶子节点存储的是数据行，可以直接访问完整数据</span></li><li fid="u166afe1d" data-lake-id="u16293dde" id="u16293dde"><span data-lake-id="u7d404ec3" id="u7d404ec3">每个表只能有一个聚簇索引，通常是主键索引，适合范围查询和排序</span></li></ul><p data-lake-id="uaad34b83" id="uaad34b83"><span data-lake-id="u3fa67c48" id="u3fa67c48">非聚簇索引：</span></p><ul list="ua8902204"><li fid="ub3484e68" data-lake-id="u691bcee1" id="u691bcee1"><span data-lake-id="u5224f34d" id="u5224f34d">叶子节点存储的是主键和对应的索引列</span></li><li fid="ub3484e68" data-lake-id="ufbfa1f37" id="ufbfa1f37"><span data-lake-id="u6afceeae" id="u6afceeae">一个表可以有多个非聚簇索引，适用于快速查找特定列的数据</span></li></ul><p data-lake-id="uadf7c93c" id="uadf7c93c"><span data-lake-id="u19a899d0" id="u19a899d0">所以不要所有查询都用 select *</span></p></details><p data-lake-id="u0bffa05c" id="u0bffa05c"><br></p><h1 data-lake-id="YxcD6" id="YxcD6"><span data-lake-id="u24785b50" id="u24785b50">Redis面试题（周五）</span></h1><details data-lake-id="ucecb10ae" id="ucecb10ae" open="false" class="lake-collapse"><summary data-lake-id="uf433c409" id="uf433c409" class="lake-summary"><strong><span data-lake-id="uc4c3d04f" id="uc4c3d04f">Redis主从复制的实现原理</span></strong></summary><p data-lake-id="u00ca6aac" id="u00ca6aac"><span data-lake-id="u00583e0f" id="u00583e0f">主从复制可以实现读写分离：</span><span data-lake-id="u58eb7b21" id="u58eb7b21" style="color: #117CEE">读操作只请求从节点</span><span data-lake-id="u9c39fe51" id="u9c39fe51">，减轻主节点压力</span></p><p data-lake-id="udb5df82d" id="udb5df82d"><span data-lake-id="uea5a0e21" id="uea5a0e21">两种数据同步方式：</span></p><ol list="udf4fed85"><li fid="uf1006f10" data-lake-id="u527e57dd" id="u527e57dd"><strong><span data-lake-id="u0b3acab9" id="u0b3acab9">全量同步</span></strong></li></ol><ol list="udf4fed85" data-lake-indent="1"><li fid="uf1006f10" data-lake-id="ue1b046fa" id="ue1b046fa"><span data-lake-id="u9a76861a" id="u9a76861a">从节点发送psync ？ -1</span></li><li fid="uf1006f10" data-lake-id="u46dd8250" id="u46dd8250"><span data-lake-id="u814e2c8f" id="u814e2c8f">主节点接收后发现runid是？</span></li></ol><ol list="udf4fed85" data-lake-indent="2"><li fid="uf1006f10" data-lake-id="u5e918aa2" id="u5e918aa2"><span data-lake-id="uf3d2ca9d" id="uf3d2ca9d">判断为全量同步，返回</span><span data-lake-id="ue3ef8992" id="ue3ef8992" style="color: #117CEE">fullresync</span></li><li fid="uf1006f10" data-lake-id="u78e0af03" id="u78e0af03"><span data-lake-id="uff55049c" id="uff55049c">并带上主服务器的</span><span data-lake-id="u701a86f0" id="u701a86f0" style="color: #117CEE">runid</span></li><li fid="uf1006f10" data-lake-id="u53f1846c" id="u53f1846c"><span data-lake-id="ud9895d60" id="ud9895d60">和当前复制进度</span><span data-lake-id="u22bd7295" id="u22bd7295" style="color: #117CEE">offset</span></li></ol><ol list="udf4fed85" start="3" data-lake-indent="1"><li fid="uf1006f10" data-lake-id="u402fbd10" id="u402fbd10"><span data-lake-id="uc4f261d6" id="uc4f261d6">主节点执行bgsave生成RDB文件</span></li></ol><ol list="udf4fed85" data-lake-indent="2"><li fid="uf1006f10" data-lake-id="ue6f9bbaa" id="ue6f9bbaa"><span data-lake-id="u8946a48f" id="u8946a48f">生成过程中接收到的写入命令会存储到</span><span data-lake-id="u63c26bd9" id="u63c26bd9" style="color: #117CEE">replication buffer</span><span data-lake-id="u8405185a" id="u8405185a">中</span></li><li fid="uf1006f10" data-lake-id="ubbda32ea" id="ubbda32ea"><span data-lake-id="u58e02f5d" id="u58e02f5d">传输RDB文件给从节点，从节点清空旧数据，加载RDB数据</span></li></ol><ol list="udf4fed85" start="4" data-lake-indent="1"><li fid="uf1006f10" data-lake-id="ud2dfa482" id="ud2dfa482"><span data-lake-id="u6d8ad20f" id="u6d8ad20f">从节点加载完成RDB后，主节点将replication buffer缓存的数据发送给从节点执行</span></li><li fid="uf1006f10" data-lake-id="u11e380fd" id="u11e380fd"><span data-lake-id="u26a8bdf0" id="u26a8bdf0">同步完成后，主从之间会保持长连接：主节点通过该连接传递后续写操作，保证数据一致性</span></li></ol><p data-lake-id="u05080899" id="u05080899" style="text-align: center"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F32436878%2F1725018528129-11766870-8cae-490f-91b1-9881415efe64.png%22%2C%22taskId%22%3A%22u7ec734a0-7905-430d-a9d3-3b8b257cdc5%22%2C%22clientId%22%3A%22u1040e4b8-8dd8-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A501.44219970703125%2C%22height%22%3A385%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A137508%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1107%2C%22originHeight%22%3A851%2C%22ratio%22%3A1.8374998569488525%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22searchocrLocations%22%3A%5B%7B%22x%22%3A111%2C%22y%22%3A23%2C%22width%22%3A111%2C%22height%22%3A38%2C%22text%22%3A%22%E4%B8%BB%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A874%2C%22y%22%3A28%2C%22width%22%3A115%2C%22height%22%3A44%2C%22text%22%3A%22%E4%BB%8E%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A408%2C%22y%22%3A74%2C%22width%22%3A177%2C%22height%22%3A42%2C%22text%22%3A%22PSYNC%20%3F-1%22%7D%2C%7B%22x%22%3A820%2C%22y%22%3A203%2C%22width%22%3A76%2C%22height%22%3A39%2C%22text%22%3A%22%E5%AD%98%E5%82%A8%22%7D%2C%7B%22x%22%3A311%2C%22y%22%3A205%2C%22width%22%3A467%2C%22height%22%3A41%2C%22text%22%3A%22FULLRESYNC%20RUNID%20OFFSET%22%7D%2C%7B%22x%22%3A913%2C%22y%22%3A209%2C%22width%22%3A107%2C%22height%22%3A31%2C%22text%22%3A%22RUNID%22%7D%2C%7B%22x%22%3A839%2C%22y%22%3A255%2C%22width%22%3A123%2C%22height%22%3A32%2C%22text%22%3A%22OFFSET%22%7D%2C%7B%22x%22%3A60%2C%22y%22%3A324%2C%22width%22%3A216%2C%22height%22%3A44%2C%22text%22%3A%22%E6%89%A7%E8%A1%8CBGSAVE%22%7D%2C%7B%22x%22%3A433%2C%22y%22%3A469%2C%22width%22%3A73%2C%22height%22%3A36%2C%22text%22%3A%22%E4%BC%A0%E8%BE%93%22%7D%2C%7B%22x%22%3A527%2C%22y%22%3A473%2C%22width%22%3A60%2C%22height%22%3A29%2C%22text%22%3A%22RDB%22%7D%2C%7B%22x%22%3A814%2C%22y%22%3A503%2C%22width%22%3A221%2C%22height%22%3A40%2C%22text%22%3A%22%E6%B8%85%E7%A9%BA%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A812%2C%22y%22%3A548%2C%22width%22%3A153%2C%22height%22%3A39%2C%22text%22%3A%22%E5%8A%A0%E8%BD%BDRDB%22%7D%2C%7B%22x%22%3A94%2C%22y%22%3A579%2C%22width%22%3A151%2C%22height%22%3A40%2C%22text%22%3A%22%E7%BC%93%E5%AD%98%E7%9A%84%E6%96%B0%22%7D%2C%7B%22x%22%3A477%2C%22y%22%3A586%2C%22width%22%3A153%2C%22height%22%3A40%2C%22text%22%3A%22%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%AF%95%22%7D%2C%7B%22x%22%3A96%2C%22y%22%3A626%2C%22width%22%3A146%2C%22height%22%3A40%2C%22text%22%3A%22%E5%86%99%E5%85%A5%E5%91%BD%E4%BB%A4%22%7D%2C%7B%22x%22%3A88%2C%22y%22%3A678%2C%22width%22%3A162%2C%22height%22%3A36%2C%22text%22%3A%22REPLICAT%22%7D%2C%7B%22x%22%3A355%2C%22y%22%3A719%2C%22width%22%3A371%2C%22height%22%3A43%2C%22text%22%3A%22%E5%90%8C%E6%AD%A5%E7%BC%93%E5%AD%98%E7%9A%84%E6%96%B0%E7%9A%84%E5%86%99%E6%93%8D%E4%BD%9C%22%7D%2C%7B%22x%22%3A128%2C%22y%22%3A725%2C%22width%22%3A62%2C%22height%22%3A28%2C%22text%22%3A%22ION%22%7D%2C%7B%22x%22%3A807%2C%22y%22%3A744%2C%22width%22%3A221%2C%22height%22%3A36%2C%22text%22%3A%22%E6%89%A7%E8%A1%8C%E5%86%99%E5%85%A5%E5%91%BD%E4%BB%A4%22%7D%2C%7B%22x%22%3A108%2C%22y%22%3A769%2C%22width%22%3A119%2C%22height%22%3A31%2C%22text%22%3A%22BUFFER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%234e4a46%22%2C%22id%22%3A%22ua589b75a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><ol list="u2d17883d" start="2"><li fid="ucfb356e3" data-lake-id="ud5a89cc9" id="ud5a89cc9"><strong><span data-lake-id="u46ae422c" id="u46ae422c">增量同步</span></strong></li></ol><ol list="u2d17883d" data-lake-indent="1"><li fid="ucfb356e3" data-lake-id="u290a3ae1" id="u290a3ae1"><span data-lake-id="uc5e6bfe9" id="uc5e6bfe9">如果网络断开，可以进行增量同步，传输断开期间的数据</span></li><li fid="ucfb356e3" data-lake-id="u4d99361b" id="u4d99361b"><span data-lake-id="ueb6c85da" id="ueb6c85da" style="color: #117CEE">repl_backlog_buffer</span><span data-lake-id="u1b852031" id="u1b852031">是一个</span><span data-lake-id="u19f909db" id="u19f909db" style="color: #117CEE">环形缓冲区（环形写入覆盖）</span><span data-lake-id="u6bf0672c" id="u6bf0672c">，默认大小1m</span></li><li fid="ucfb356e3" data-lake-id="u8618ff83" id="u8618ff83"><span data-lake-id="u02650525" id="u02650525">if 主节点判断主从runid一致 &amp;&amp; </span><span data-lake-id="u7d1a24bd" id="u7d1a24bd" style="color: #117CEE">offset判断数据还在repl_backlog_buffer中</span><span data-lake-id="u4c783e7a" id="u4c783e7a">，进行增量同步</span></li><li fid="ucfb356e3" data-lake-id="u1ee80a84" id="u1ee80a84"><span data-lake-id="u73bacdd7" id="u73bacdd7">如果offset判断数据已经被覆盖了，此时只能触发全量同步</span></li></ol><p data-lake-id="uf0a2a2ba" id="uf0a2a2ba" style="text-align: center"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F32436878%2F1725019358166-b52e4424-6f3d-4f02-bef4-dbfc6aab5333.png%22%2C%22taskId%22%3A%22u6793c115-44f6-434d-9911-86f69d49233%22%2C%22clientId%22%3A%22u1040e4b8-8dd8-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A484.01702880859375%2C%22height%22%3A366%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A127556%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1348%2C%22originHeight%22%3A1019%2C%22ratio%22%3A1.8374998569488525%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%BB%E8%8A%82%E7%82%B9%20%E4%BB%8E%E8%8A%82%E7%82%B9%20PSYNC%20RUNID(%E4%B8%BB%E8%8A%82%E7%82%B9%E7%9A%84%20RUNID)233%20ID%20%E4%B8%80%E8%87%B4%20RUN%20%E5%8C%85%E5%90%AB%20OFFSET%20CONTINUE%20REPL_BAC%20KLOG-BUF%20FER%20%E9%80%9A%E8%BF%87OFFSET%E5%AE%9A%E4%BD%8D%2C%E4%BC%A0%E9%80%92%E5%86%99%E5%91%BD%E4%BB%A4%20REPLICAT%20%E5%90%8C%E6%AD%A5%E7%BC%93%E5%AD%98%E7%9A%84%E6%96%B0%E7%9A%84%E5%86%99%E6%93%8D%E4%BD%9C%20ION%20%E6%89%A7%E8%A1%8C%E5%86%99%E5%85%A5%E5%91%BD%E4%BB%A4%20BUFFER%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A292%2C%22y%22%3A1%2C%22width%22%3A110%2C%22height%22%3A41%2C%22text%22%3A%22%E4%B8%BB%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A1111%2C%22y%22%3A11%2C%22width%22%3A109%2C%22height%22%3A40%2C%22text%22%3A%22%E4%BB%8E%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A493%2C%22y%22%3A62%2C%22width%22%3A342%2C%22height%22%3A37%2C%22text%22%3A%22PSYNC%20RUNID(%E4%B8%BB%E8%8A%82%E7%82%B9%E7%9A%84%22%7D%2C%7B%22x%22%3A852%2C%22y%22%3A65%2C%22width%22%3A160%2C%22height%22%3A29%2C%22text%22%3A%22RUNID)233%22%7D%2C%7B%22x%22%3A321%2C%22y%22%3A157%2C%22width%22%3A138%2C%22height%22%3A36%2C%22text%22%3A%22ID%20%E4%B8%80%E8%87%B4%22%7D%2C%7B%22x%22%3A249%2C%22y%22%3A167%2C%22width%22%3A56%2C%22height%22%3A23%2C%22text%22%3A%22RUN%22%7D%2C%7B%22x%22%3A386%2C%22y%22%3A202%2C%22width%22%3A69%2C%22height%22%3A36%2C%22text%22%3A%22%E5%8C%85%E5%90%AB%22%7D%2C%7B%22x%22%3A246%2C%22y%22%3A206%2C%22width%22%3A119%2C%22height%22%3A31%2C%22text%22%3A%22OFFSET%22%7D%2C%7B%22x%22%3A626%2C%22y%22%3A225%2C%22width%22%3A165%2C%22height%22%3A31%2C%22text%22%3A%22CONTINUE%22%7D%2C%7B%22x%22%3A268%2C%22y%22%3A350%2C%22width%22%3A159%2C%22height%22%3A36%2C%22text%22%3A%22REPL_BAC%22%7D%2C%7B%22x%22%3A266%2C%22y%22%3A391%2C%22width%22%3A161%2C%22height%22%3A38%2C%22text%22%3A%22KLOG-BUF%22%7D%2C%7B%22x%22%3A318%2C%22y%22%3A441%2C%22width%22%3A57%2C%22height%22%3A28%2C%22text%22%3A%22FER%22%7D%2C%7B%22x%22%3A60%2C%22y%22%3A595%2C%22width%22%3A461%2C%22height%22%3A33%2C%22text%22%3A%22%E9%80%9A%E8%BF%87OFFSET%E5%AE%9A%E4%BD%8D%2C%E4%BC%A0%E9%80%92%E5%86%99%E5%91%BD%E4%BB%A4%22%7D%2C%7B%22x%22%3A268%2C%22y%22%3A768%2C%22width%22%3A166%2C%22height%22%3A41%2C%22text%22%3A%22REPLICAT%22%7D%2C%7B%22x%22%3A556%2C%22y%22%3A807%2C%22width%22%3A362%2C%22height%22%3A35%2C%22text%22%3A%22%E5%90%8C%E6%AD%A5%E7%BC%93%E5%AD%98%E7%9A%84%E6%96%B0%E7%9A%84%E5%86%99%E6%93%8D%E4%BD%9C%22%7D%2C%7B%22x%22%3A312%2C%22y%22%3A819%2C%22width%22%3A62%2C%22height%22%3A30%2C%22text%22%3A%22ION%22%7D%2C%7B%22x%22%3A1045%2C%22y%22%3A845%2C%22width%22%3A220%2C%22height%22%3A38%2C%22text%22%3A%22%E6%89%A7%E8%A1%8C%E5%86%99%E5%85%A5%E5%91%BD%E4%BB%A4%22%7D%2C%7B%22x%22%3A291%2C%22y%22%3A862%2C%22width%22%3A119%2C%22height%22%3A32%2C%22text%22%3A%22BUFFER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6e495%22%2C%22id%22%3A%22u7d20d961%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ud4a30c3e" id="ud4a30c3e"><br></p><p data-lake-id="ub427fb33" id="ub427fb33"><strong><span data-lake-id="ue5b6bb61" id="ue5b6bb61">replication buffer</span></strong><span data-lake-id="ue9e62085" id="ue9e62085">：主节点会为</span><span data-lake-id="ude5591b6" id="ude5591b6" style="color: #117CEE">每个从节点都创建一个</span><span data-lake-id="u8436ba8d" id="u8436ba8d">，用于实时传输写命令，大小通过client-output-buffer-limit间接控制，缓冲区大小超过限制时，Redis会断开与客户端的连接</span></p><p data-lake-id="u9a2d95b4" id="u9a2d95b4"><strong><span data-lake-id="u3d8da2be" id="u3d8da2be">repl_backlog_buffer</span></strong><span data-lake-id="u56bc32b7" id="u56bc32b7">：在主节点上只有</span><span data-lake-id="uc990c23b" id="uc990c23b" style="color: #117CEE">一个</span><span data-lake-id="u397f85ab" id="u397f85ab">，存储最近的写命令，用于从服务器重新连接时进行部分重同步</span></p></details><details data-lake-id="ud1c55820" id="ud1c55820" open="true" class="lake-collapse"><summary data-lake-id="u3658f387" id="u3658f387" class="lake-summary"><strong><span data-lake-id="u9e0c08f9" id="u9e0c08f9">Redis集群的实现原理是什么？</span></strong></summary><p data-lake-id="u963764d2" id="u963764d2"><span data-lake-id="u4ad461c2" id="u4ad461c2">多个Redis实例存储部分的数据（不重复）</span></p><p data-lake-id="ue2d6785d" id="ue2d6785d"><span data-lake-id="u1a9f8c93" id="u1a9f8c93">采用哈希槽，划分整个键空间为16384个槽，key经过CRC16算法后对16384取余定位到对应节点</span></p></details><details data-lake-id="u54c550be" id="u54c550be" open="true" class="lake-collapse"><summary data-lake-id="u61bb9b6a" id="u61bb9b6a" class="lake-summary"><strong><span data-lake-id="ub2130c92" id="ub2130c92">Redis集群中节点之间信息如何同步？</span></strong></summary><ul list="uaeb7a6b5"><li fid="u852e1735" data-lake-id="u05e09d69" id="u05e09d69"><span data-lake-id="ud8080473" id="ud8080473">每个节点保存所有节点的ID、IP、端口、负责的哈希槽范围</span></li><li fid="u852e1735" data-lake-id="u61dc5951" id="u61dc5951"><span data-lake-id="u98bb39aa" id="u98bb39aa">节点之间使用Gossip协议进行状态交换，保持一致性和故障检测</span></li></ul><ul list="uaeb7a6b5" data-lake-indent="1"><li fid="u852e1735" data-lake-id="u11c0254d" id="u11c0254d"><span data-lake-id="u15e6831d" id="u15e6831d">分布式信息传播</span></li><li fid="u852e1735" data-lake-id="ud5c72be8" id="ud5c72be8"><span data-lake-id="u99d15f34" id="u99d15f34">低延迟和高效率</span></li><li fid="u852e1735" data-lake-id="uf75a557c" id="uf75a557c"><span data-lake-id="uf52fa371" id="uf52fa371">去中心化</span></li></ul></details><details data-lake-id="u48eaf91f" id="u48eaf91f" open="true" class="lake-collapse"><summary data-lake-id="ufd516fb2" id="ufd516fb2" class="lake-summary"><strong><span data-lake-id="u7df2f132" id="u7df2f132">为什么Redis哈希槽节点数目是16384？</span></strong></summary><ol list="uea130610"><li fid="u0d5fff76" data-lake-id="udbd3f70c" id="udbd3f70c"><span data-lake-id="u8195488c" id="u8195488c">消息大小的考虑：16384数据包只要2k:消息头的myslots槽信息占8位，16384 / 8 / 1024 = 2kb。</span></li><li fid="u0d5fff76" data-lake-id="u7f1d5fe5" id="u7f1d5fe5"><span data-lake-id="uc9117a96" id="uc9117a96">集群规模的考虑：集群太可能扩展超过1000个节点，16384够用且每个分片下的槽不会太少</span></li></ol></details><h1 data-lake-id="XYkxM" id="XYkxM"><span data-lake-id="u3c182084" id="u3c182084">Java基础（周六）</span></h1><details data-lake-id="u4fda484b" id="u4fda484b" open="true" class="lake-collapse"><summary data-lake-id="u88c378f4" id="u88c378f4" class="lake-summary"><strong><span data-lake-id="u9815e74a" id="u9815e74a">Java优势</span></strong></summary><p data-lake-id="u6caa94d3" id="u6caa94d3"><span data-lake-id="u7e393076" id="u7e393076">跨平台 ：一次编写，多平台运行</span></p><p data-lake-id="uf9593182" id="uf9593182"><span data-lake-id="u608f2ff6" id="u608f2ff6">垃圾自动回收机制：减轻负担，提升效率</span></p><p data-lake-id="u88c5e64a" id="u88c5e64a"><span data-lake-id="u64f19db0" id="u64f19db0">生态全面：各种第三方类库和框架</span></p></details><details data-lake-id="ufbd0283e" id="ufbd0283e" open="true" class="lake-collapse"><summary data-lake-id="ufe7eb892" id="ufe7eb892" class="lake-summary"><strong><span data-lake-id="u6de42daa" id="u6de42daa">多态特性</span></strong></summary><p data-lake-id="ud17a1ffd" id="ud17a1ffd"><span data-lake-id="u43256485" id="u43256485">多态是一种抽象行为，我爱吃水果（苹果/梨子）</span></p><p data-lake-id="u67e4ef90" id="u67e4ef90"><span data-lake-id="ubecbb167" id="ubecbb167">体现：（1）子类重写父类方法（2）接口</span><span data-lake-id="u06393b0d" id="u06393b0d" style="background-color: #FBE4E7">实现</span></p></details><details data-lake-id="u2a9ad9cd" id="u2a9ad9cd" open="true" class="lake-collapse"><summary data-lake-id="u5ecaab43" id="u5ecaab43" class="lake-summary"><strong><span data-lake-id="u4edfa82a" id="u4edfa82a">Java内存堆栈</span></strong></summary><p data-lake-id="u66ce50ad" id="u66ce50ad"><span data-lake-id="ub053781d" id="ub053781d">堆：对象（引用类型变量存的就是对象在堆中的地址）</span></p><p data-lake-id="ue841f99c" id="ue841f99c"><span data-lake-id="udee78591" id="udee78591">栈：局部变量和方法参数</span></p></details><h1 data-lake-id="uxfFO" id="uxfFO"><span data-lake-id="ud7480890" id="ud7480890">Java集合（周日）</span></h1><details data-lake-id="u41d387d9" id="u41d387d9" open="true" class="lake-collapse"><summary data-lake-id="u413cf2fa" id="u413cf2fa" class="lake-summary"><strong><span data-lake-id="u87676eaf" id="u87676eaf">Java有哪些集合类</span></strong></summary><ul list="u7b1731c8"><li fid="ubb68ec15" data-lake-id="u31305d93" id="u31305d93"><strong><span data-lake-id="ubf84b99a" id="ubf84b99a">Collection接口（用于存储对象）</span></strong></li></ul><ul list="u7b1731c8" data-lake-indent="1"><li fid="ubb68ec15" data-lake-id="u6e5a26af" id="u6e5a26af"><span data-lake-id="u32e8abab" id="u32e8abab">List接口</span></li></ul><ul list="u7b1731c8" data-lake-indent="2"><li fid="ubb68ec15" data-lake-id="u71b418b7" id="u71b418b7"><span data-lake-id="ud1e6955f" id="ud1e6955f">ArrayList 基于动态数组，查询快</span></li><li fid="ubb68ec15" data-lake-id="u86952e66" id="u86952e66"><span data-lake-id="u5e1d6caa" id="u5e1d6caa">LinkedList 基于双向链表，增删快</span></li><li fid="ubb68ec15" data-lake-id="u0438cb99" id="u0438cb99"><span data-lake-id="u26b7f5bf" id="u26b7f5bf">Vector 是</span><span data-lake-id="ufc2194c0" id="ufc2194c0" style="background-color: #FBE4E7">线程安全</span><span data-lake-id="u230f2488" id="u230f2488">的动态数组，开销大</span></li></ul><ul list="u7b1731c8" start="2" data-lake-indent="1"><li fid="ubb68ec15" data-lake-id="u27e0abd7" id="u27e0abd7"><span data-lake-id="uc8ba7acb" id="uc8ba7acb">Set接口（不允许重复）</span></li></ul><ul list="u7b1731c8" data-lake-indent="2"><li fid="ubb68ec15" data-lake-id="u495a220a" id="u495a220a"><span data-lake-id="u7ec84c0a" id="u7ec84c0a">HashSet 无序</span></li><li fid="ubb68ec15" data-lake-id="u158a5092" id="u158a5092"><span data-lake-id="u74580b54" id="u74580b54">LinkedHashSet 维护插入顺序</span></li><li fid="ubb68ec15" data-lake-id="uc9c6385a" id="uc9c6385a"><span data-lake-id="u830ab156" id="u830ab156" style="background-color: #FBE4E7">TreeSet 有序</span></li></ul><ul list="u7b1731c8" start="3" data-lake-indent="1"><li fid="ubb68ec15" data-lake-id="u2d4e4f22" id="u2d4e4f22"><span data-lake-id="ud49c09c3" id="ud49c09c3">Queue接口</span></li></ul><ul list="u7b1731c8" data-lake-indent="2"><li fid="ubb68ec15" data-lake-id="uc0e9d2e8" id="uc0e9d2e8"><span data-lake-id="ueabe76e3" id="ueabe76e3">PriorityQueue 可以指定比较器顺序</span></li><li fid="ubb68ec15" data-lake-id="ue1ff346c" id="ue1ff346c"><span data-lake-id="u1103650c" id="u1103650c">LinkedList 支持FIFO</span></li></ul><ul list="u7b1731c8" start="2"><li fid="ubb68ec15" data-lake-id="u2f99c013" id="u2f99c013"><strong><span data-lake-id="u12d74f0c" id="u12d74f0c">Map接口（用于存储键值对）</span></strong></li></ul><ul list="u7b1731c8" data-lake-indent="1"><li fid="ubb68ec15" data-lake-id="udbc1b6a3" id="udbc1b6a3"><span data-lake-id="u306c9797" id="u306c9797">HashMap无序</span></li><li fid="ubb68ec15" data-lake-id="uc79056e9" id="uc79056e9"><span data-lake-id="u92d1482a" id="u92d1482a">LinkedHashMap</span></li><li fid="ubb68ec15" data-lake-id="uaf09e8b5" id="uaf09e8b5"><span data-lake-id="u93ce7b59" id="u93ce7b59">TreeMap</span></li><li fid="ubb68ec15" data-lake-id="ue180c9cd" id="ue180c9cd"><span data-lake-id="ufd714960" id="ufd714960" style="background-color: #FBE4E7">HashTable 线程安全，不允许键值为null</span></li><li fid="ubb68ec15" data-lake-id="u3a6daf00" id="u3a6daf00"><span data-lake-id="u7f045d79" id="u7f045d79">ConcurrentHashMap </span><span data-lake-id="uf50b9d08" id="uf50b9d08" style="background-color: #FBE4E7">线程安全</span><span data-lake-id="ubbd49885" id="ubbd49885">，适合高并发</span></li></ul></details><details data-lake-id="u60e5610e" id="u60e5610e" open="true" class="lake-collapse"><summary data-lake-id="u96f01c05" id="u96f01c05" class="lake-summary"><strong><span data-lake-id="u61401acb" id="u61401acb">数组 vs 链表</span></strong></summary><ol list="u9b91479e"><li fid="u003a99ae" data-lake-id="u0d1e02ea" id="u0d1e02ea"><span data-lake-id="u10bcb4df" id="u10bcb4df">存储结构</span></li></ol><ol list="u9b91479e" data-lake-indent="1"><li fid="u003a99ae" data-lake-id="uae4fb11a" id="uae4fb11a"><span data-lake-id="u9dec5c30" id="u9dec5c30">数组：大小固定的连续内存块</span></li><li fid="u003a99ae" data-lake-id="u6ce54cec" id="u6ce54cec"><span data-lake-id="ue1ee4c12" id="ue1ee4c12">链表：基于节点、不连续、可扩展</span></li></ol><ol list="u9b91479e" start="2"><li fid="u003a99ae" data-lake-id="u4b7841eb" id="u4b7841eb"><span data-lake-id="u51ccfbcf" id="u51ccfbcf">查找</span></li></ol><ol list="u9b91479e" data-lake-indent="1"><li fid="u003a99ae" data-lake-id="u54c9551b" id="u54c9551b"><span data-lake-id="ud8edb05d" id="ud8edb05d">数组：支持O(1)时间的随机访问</span></li><li fid="u003a99ae" data-lake-id="u5f1e2526" id="u5f1e2526"><span data-lake-id="u73882f3e" id="u73882f3e">链表：O(n)</span></li></ol><ol list="u9b91479e" start="3"><li fid="u003a99ae" data-lake-id="u76f51270" id="u76f51270"><span data-lake-id="u488d2ac8" id="u488d2ac8">增删</span></li></ol><ol list="u9b91479e" data-lake-indent="1"><li fid="u003a99ae" data-lake-id="uff2db265" id="uff2db265"><span data-lake-id="uab5c7ffe" id="uab5c7ffe">数组：增删需要移动数据 O(n)</span></li><li fid="u003a99ae" data-lake-id="u1e7c4aa4" id="u1e7c4aa4"><span data-lake-id="u149ab6d1" id="u149ab6d1">链表：O(1)</span></li></ol><ol list="u9b91479e" start="4"><li fid="u003a99ae" data-lake-id="u0fc2efcc" id="u0fc2efcc"><span data-lake-id="u1ba5df86" id="u1ba5df86">使用场景</span></li></ol><ol list="u9b91479e" data-lake-indent="1"><li fid="u003a99ae" data-lake-id="u200123ef" id="u200123ef"><span data-lake-id="ueaefc826" id="ueaefc826">数组适合查询多，例如实现缓存</span></li><li fid="u003a99ae" data-lake-id="uad4fb510" id="uad4fb510"><span data-lake-id="u13bae357" id="u13bae357">链表适合增删多，例如实现队列、栈</span></li></ol><p data-lake-id="u69b223db" id="u69b223db"><br></p><p data-lake-id="u949e6b36" id="u949e6b36"><span data-lake-id="u316117c2" id="u316117c2">CPU亲和性 / 空间局部性：一块内存被访问，那么其附近内存也很可能被访问。</span></p></details><p data-lake-id="u49d87b63" id="u49d87b63"><br></p>